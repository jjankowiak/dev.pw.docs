openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/plusworkflow/rest_api_PW/1.0.0
  - url: https://{address}/PlusWorkflow
    description: System ULR
    variables:
      address:
        default: "your_address"        
  - url: http://localhost:8080/PlusWorkflow
    description: System ULR
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/plusworkflow/PlusWorkflow/1.0.3
 # - description: SwaggerHub API Auto Mocking
 #   url: https://virtserver.swaggerhub.com/JJANKOWIAK_1/PlusWorkflow/1.0.0
 # - url: https://api.example3.com
 #   description: New Server 3
info:
  description: |
    The **Plus Workflow API** allows you to perform essential system operations in an automated way.

    To properly use the API, authentication must be performed via the **Authorize** button.  
    Make sure the user is **logged out** of the Plus Workflow system before sending requests.

    ## üß≠ Before you start

    1. Make sure you are working on an **external access** website.
    2. Log out of the Plus Workflow system.
    3. Click the **Authorize** button on the current page.
    4. Log in using credentials matching your Plus Workflow account.
    5. In the **Server Variables** section, enter your domain address.

    ## üîê Basic Authentication

    The API supports **BasicAuth** as the primary authentication mechanism.  
    Each request must include an `Authorization` header containing a Base64-encoded string in the format `username:password`.

    **Example header**
    ```
    Authorization: Basic base64(username:password)
    ```

    **Example in practice**
    ```
    Authorization: Basic YXBpX3VzZXI6UzNjcmV0IQ==
    ```

    ‚úÖ When using **BasicAuth**, no CSRF token is required.  
    ‚ö†Ô∏è Always use HTTPS when sending credentials.

    ---

    ## üì¶ Request Body Format

    Depending on the endpoint, the request body must be sent in one of the following formats:

    - **application/json** ‚Äî used for most API operations  
      Example:
      ```json
      {
        "clientId": "string",
        "tenantId": "string"
      }
      ```

    - **application/x-www-form-urlencoded** ‚Äî used only for endpoints explicitly marked as such  
      Example:
      ```
      clientId=string&tenantId=string
      ```

    Always include the appropriate `Content-Type` header:
    ```
    Content-Type: application/json
    ```
    or
    ```
    Content-Type: application/x-www-form-urlencoded
    ```

    ---

    ## üõ°Ô∏è CSRF Protection in the System

    A **CSRF (Cross-Site Request Forgery)** protection mechanism has been introduced in the system.

    ### What does it mean?

    All HTTP requests that **modify data** (e.g. `POST`, `PUT`, `PATCH`, `DELETE`) **must include a valid CSRF token**,  
    unless the request is authenticated using **BasicAuth**.

    ### üîë Authentication Behavior

    **BasicAuth**
    - Fully supported and recommended.
    - CSRF token is **not required**.

    **Other Authentication Methods**
    - CSRF token **is required** for all data-changing requests.
    - Missing or invalid token will result in `403 Forbidden`.

    ### ‚öôÔ∏è System Configuration

    If you are not using BasicAuth and encounter CSRF validation issues,  
    you can temporarily disable protection via configuration:
    ```
    CsrfProtectionEnabled = false
    ```

    ---

    ## üì• Retrieving the CSRF Token

    To fetch a CSRF token:

    ```
    GET /api/csrf/token
    ```

    **Example response**
    ```json
    {
      "token": "jFWCjzaBHP8rEFnckuWRIkZaeVajGDxptEXh4T4b0giel3RRumbj61OzfsgGImjuoMilE3FjVDSUIAxE13GEgFwrsaAr80Fn",
      "headerName": "X-CSRF-TOKEN",
      "parameterName": "_csrf"
    }
    ```

    Additionally, the server returns a cookie:
    ```
    Set-Cookie: session1
    ```

    This represents the user's initial session and must be stored along with the CSRF token.

    **Store the following:**
    - `session1` cookie (from `Set-Cookie`)
    - CSRF token value (`token`)
    - Header name (usually `X-CSRF-TOKEN`)

    ---

    ## üîê Logging In with a CSRF Token

    To log in securely using a CSRF token:

    ```
    POST /api/authentication/login
    ```

    **Required headers**
    ```
    X-CSRF-TOKEN: <token1>
    ```

    **Required cookies**
    ```
    session1
    ```

    **Server response**
    - New session cookie: `Set-Cookie: session2`
    - New CSRF token: `token2`

    Use `token2` and `session2` for all authorized requests after login.

    ---

    ## üì§ Sending Authorized Requests

    For any secured operation (e.g., creating or modifying data):

    ```
    POST /api/...
    ```

    **Headers**
    ```
    X-CSRF-TOKEN: <token2>
    ```

    **Cookies**
    ```
    session2
    ```

    ---

    ‚ùó **Important:**  
    If you are not using BasicAuth, a **CSRF token is mandatory** for all data-changing operations.

  
  version: 1.0.0
  title: Plus Workflow REST API
  contact:
    email: jjankowiak@suncode.pl
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: users
    description: Actions on users
  - name: groups
    description: Actions on groups
  - name: activities
    description: Users' activities
  - name: documents
    description: System documents
  - name: comments
    description: Comments in the system
  - name: activity form
    description: Activities on the activity form
  - name: system login
    description: Basic system login activities
  - name: user deactivation
    description: Actions on deactivated user
  - name: processes
    description: Process management
  - name: packages
    description: Packages management
  - name: server loggers
    description: The servlets in this API allow you to log messages to the server using Logger from the log4j library
  - name: others
    description: Other system activities
  - name: system configuration
    description: Configuration of the system
  - name: views
    description: User views
  - name: certificates
    description: System certificates
  - name: appearance
    description: User appearance
  - name: positions
    description: Positions
  - name: organizational units
    description: Organizational Units
  - name: calendar shares
    description: User calendar shares
  - name: substitutions
    description: Substitutions
  - name: translations
    description: Translations
  - name: email config
    description: System email config
  - name: mappings
    description: Mappings
  - name: scheduled tasks
    description: Scheduled tasks
  - name: document classes
    description: Document classes
  - name: document sets
    description: Document sets
  - name: oauth
    description: OAuth
  - name: dashboard
    description: Dashboard
  - name: process definitions
    description: Process definitions
  - name: system messages
    description: System messages
  - name: reports
    description: System reports
    
security:
  - basicAuth: []
paths:
  /api/report/{reportId}/export/{extension}:
    get:
      tags:
        - reports
      summary: Report export
      description: Exports the report to the selected file format.
      parameters:
        - name: reportId
          in: path
          required: true
          description: Report ID for export.
          schema:
            type: integer
        - name: extension
          in: path
          required: true
          description: Export file format
          schema:
            type: string
            enum: [pdf, excel, csv]
      responses:
        '200':
          description: Exports completed successfully.
        '400':
          description: Incorrect file format.
        '404':
          description: Report not found.

  /api/dashboards/{id}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - dashboard
      summary: Downloading dashboard
      description: Retrieves a dashboard with given id
      parameters:
      - name: "id"
        in: "path"
        description:
          Dashboard id
        required: true
        schema:
          type: "number"
          format: "int64"
      - name: "system"
        in: "query"
        description: Is system dashboard
        schema:
          type: boolean
      responses:
        '200':
          description: OK
    delete:
      security:
          - basicAuth: [] 
      tags:
        - dashboard
      summary: Deleting dashboard
      description: Deletes dashboard with given id
      parameters:
      - name: "id"
        in: "path"
        description:
          Dashboard id
        required: true
        schema:
          type: "number"
          format: "int64"
      responses:
        '200':
          description: OK
    post:
      security:
        - basicAuth: []
      tags:
        - dashboard
      summary: Updating dashboard
      parameters:
      - name: "id"
        in: "path"
        description: Dashboard id
        required: true
        schema:
          type: "number"
          format: "int64"
      requestBody:
        description: |
            The query contains a JSON object containing definition of dashboard to update. The definition should include the following fields
            - **name** - name of the dashboard (required)
            - **description** - description of the dashboard
            - **abbreviation** - abbreviation of the dashboard(max 3 letters)
            - **color** - color of the dashboard
            - **share** - list of share objects 
              - type - USER/ GROUP
              - resource - id of the user/group or list of one share with type - ALL
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateForm' 
      responses:
        '200':
          description: OK
  /api/dashboards/{id}/appendGadget:
    post:
      security:
        - basicAuth: []
      tags:
        - dashboard
      summary: From version 4.2.9. Appending gadget to existing dashboard. Allows adding gadget next to already existing gadget. Requires write permission to dashboard.
      operationId: "appendGadgetToDashboard"
      parameters:
      - name: "id"
        in: "path"
        description:
          Dashboard id
          <br><br>
          You can use **/api/dashboards/query?type=all** endpoint to retrieve list of dashboards.
        required: true
        schema:
          type: "number"
          format: "int64"
      requestBody:
        description: |
            The query contains a JSON object containing definition of gadget to add. The definition should include the following fields
            - **key** - gadget key
            - **properties** - object with key/value pairs of gadget properties
            - **layout** - object defining layout of added gadget
            <br>
            - **layout** - should include the following fields
            - **appendType** - add gadget to end of the dashboard (END) or next to existing gadget (APPEND_TO_GADGET)
            - **width** (not required) - gadget width (must be less or equal dashboard resolution - 24)
            - **height** (not required) - gadget height in pixels
            - **targetGadgetId** (required only if appendType = APPEND_TO_GADGET) - gadget id next to which it is to be appended
            <br>
            <br>
            > You can use `/api/dashboards/<dashboard_id>` endpoint to access gadget properties of existing gadgets.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gadgetAppendDto' 
      responses:
        '200':
          description: Gadget added. If there were any errors on setting gadget properties, list of errors is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  gadgetId:
                    type: number
                  propertiesErrors:
                    type: array
                    items:
                      type: object
                      properties:
                        propertyName:
                          type: string
                        error:
                          type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [false]
                  message:
                    type: string
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [false]
                  message:
                    type: string
  /api/users/query:
    get:
      security:
        - basicAuth: []
      tags:
        - users
      summary: Downloading the list of users
      operationId: downloadList
      description: |
        The answer contains an object storing the total number of results in the total field, and a list of users in the data field.
      parameters:
        - in: query
          name: query
          description: A phrase on the basis of which the results will be filtered. Filtering applies to the login, first and last name of users
          required: false
          schema:
            type: string
        - in: query
          name: start
          description: The offset in the result set
          schema:
            type: integer
        - in: query
          name: limit
          description: The maximum number of returned results
          schema:
            type: integer
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/downloadList'
        '400':
          description: bad input parameter
  
  /api/users/by/roles:
    post:
      security:
        - basicAuth: []    
      tags:
        - users
      summary: Downloading the list of users by roles
      operationId: downloadUserRole
      description: |
        JSON object list containing role search parameters: 
        - **processDefId** - Id of the process definition 
        - **packageId** - Id of the package 
        - **roleIds** - List of role id
      requestBody:
        content:
          application/json:
            schema:
              type: array 
              items:
                type: object
                properties:
                  processDefId:
                    type: string 
                  packageId:
                    type: string
                  roleIds:
                    type: array
                    items: 
                      type: string
      responses:
        '200':
          description: Search results matching criteria
      #  requestBody:
       #   application/json:
        #    schema:
         #     $ref: '#/components/schemas/downloadListData'
  /api/users/by/login:
    get:
      security:
        - basicAuth: []    
      tags:
        - users
      summary: Getting user information by login
      operationId: getUserInfo
      description: |
        The response returns a UserInfo object with information about the user
      parameters:
        - in: query
          name: username
          description: Login of the requested user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getUserInfo'
        '400':
          description: Bad input parameter
  /api/users/current:
    get:
      security:
        - basicAuth: []    
      tags:
        - users
      summary: Getting information about the currently logged in user
      operationId: getCurrentUserInfo
      description: |
        The response returns a UserInfo object with information about the logged in user
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getCurrentUserInfo'
        '400':
          description: Bad input parameter
  /api/users/block/{userId}:
    get:
      security:
        - basicAuth: []    
      tags:
        - users
      summary: (Admin) Blocking user
      description: Blocks user with given id
      parameters:
        - in: path
          name: userId
          description: Id of the user to block
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/users/unblock/{userId}:
    get:
      security:
        - basicAuth: []    
      tags:
        - users
      summary: (Admin) Unblocking user
      description: Unblocks user with given id
      parameters:
        - in: path
          name: userId
          description: Id of the user to unblock
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/users:
    post:
      security:
        - basicAuth: []    
      tags:
        - users
      summary: (Admin) Adding new user
      description: Adds new user to the system
      requestBody:
        description: |
          The executed query adds new user. The query is a JSON object with the following fields: 
          - **domainId** - id of the domain (null, if none)
          - **username** - username of the user
          - **firstName** - first name of the user
          - **lastName** - last name of the user
          - **email** - user's email
          - **number** - user's number
          - **password** - user's password
          - **groupIds** - ids of the user groups 
          - **positionIds** - ids of the user positions
          - **waitingForPasswordAssign** - should send activation link
          - **language** - language
          - **onlySsoLogin** - only log in with sso
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addUserDto'
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/users/{userId}:
    delete:
      security:
        - basicAuth: []    
      tags:
        - users
      summary: (Admin) Deleting user
      description: Deletes user with given id
      parameters:
        - in: path
          name: userId
          description: Id of the user to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
    post:
      security:
        - basicAuth: []    
      tags:
        - users
      summary: (Admin) Editing user 
      description: Edits user data
      parameters:
        - in: path
          name: userId
          description: id of the user
          required: true
          schema:
            type: integer
      requestBody:
        description: |
          The executed query changes the user with given id. The query is a JSON object with the following fields:
          - **domainId** - id of the domain (null, if none)
          - **username** - username of the user
          - **firstName** - first name of the user
          - **lastName** - last name of the user
          - **email** - user's email
          - **number** - user's number
          - **password** - user's password (if deletePassword -> false)
          - **deletePassword** - deletes password for user
          - **onlySsoLogin** - only log in with sso
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changeUserDto'
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/users/group/attach:
    post:
      security:
        - basicAuth: []    
      tags:
        - users
      summary: (Admin) Adding user to group
      description: Adds user with given id to the group
      parameters:
        - in: query
          name: userId
          description: Id of the user
          required: true
          schema:
            type: integer
        - in: query
          name: groupId
          description: Id of the group
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/users/group/detach:
    post:
      security:
        - basicAuth: []    
      tags:
        - users
      summary: (Admin) Detaching user from the group
      description: Detaches user with given id from the group
      parameters:
        - in: query
          name: userId
          description: Id of the user
          required: true
          schema:
            type: integer
        - in: query
          name: groupId
          description: Id of the group
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/users/ldap/import:
    post:
      security:
        - basicAuth: []    
      tags:
        - users
      summary: (Admin) Importing users from ldap
      description: Imports users from ldap
      parameters:
        - in: query
          name: userId
          description: Id of the user
          required: true
          schema:
            type: integer
        - in: query
          name: groupId
          description: Id of the group
          required: true
          schema:
            type: integer
      requestBody:
        description: |
          The executed query imports users from ldap. The query is a JSON object with the following fields 
          - **domainId** - id of the domain
          - **dnPath** - base dn
          - **importFilter** - import filter
          - **defaultGroupNames** - group names which users will be added to, that cannot be assigned to another group, taking into account the configuration in the fields below
          - **addToDefaultGroup** - users will be added to the specified default group
          - **addToLdapGroup** - users will be added to the groups, that are assigned in the ldap
          - **createNotExistingGroups** - (if addToLdapGroup = true) Non-existent groups in the system, that users have assigned in LDAP, will be created. If the option is not selected, the user will be added to the default group if there is no group in the system.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/importLdapUsersDto'
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/users/substitutions:
    get:
      security:
        - basicAuth: []    
      tags:
        - users
      summary: Downloading a list of possible user substitutions
      description: Downloads a list of possible user substitutions
      parameters:
        - in: query
          name: substitutedLogin
          description: Username of the user to be substituted
          schema:
            type: string
          required: true
        - in: query
          name: start
          description: The offset in the result set
          schema:
            type: integer
            default: 0
        - in: query
          name: limit
          description: The maximum number of returned results
          schema:
            type: integer
            default: 20
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "userName"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "DESC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/activation:
    post:
      security:
        - basicAuth: []    
      tags:
        - users
      summary: (Admin) Activating user
      description: Activates user
      parameters:
        - in: query
          name: username
          description: Username of the user to be activated
          required: true
          schema:
            type: string
        - in: query
          name: groupNameToAttach
          description: Name of the group
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/groups/query:
    get:
      security:
        - basicAuth: []    
      tags:
        - groups
      summary: Downloading a list of groups
      operationId: getGroup
      description:
        The answer contains an object storing the total number of results in the total field, and a list of groups in the data field
      parameters:
        - in: query
          name: query
          description: A phrase, on the basis of which the results will be filtered. Filtering applies to the group name
          schema:
            type: string
        - in: query
          name: start
          description: The offset in the result set
          schema:
            type: integer
        - in: query
          name: limit
          description: The maximum number of returned results
          schema:
            type: integer
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getGroup'
        '400':
          description: Bad input parameter
  /api/groups:
    put:
      security:
        - basicAuth: []    
      tags:
        - groups
      summary: (Admin) Changing a group description
      description: Changes the group description
      requestBody:
        description: |
          The executed query changes group description. The query is a JSON object with the following fields: 
          - **id** - id of the group 
          - **name** - name of the group 
          - **description** - new description of the group
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupDto'
      responses:
        '200':
          description: "OK"
        '403':
          description: "Forbidden"
    post:
      security:
        - basicAuth: []    
      tags:
        - groups
      summary: (Admin) Adding a new group
      description: Adds a new group
      requestBody:
        description: |
          The executed query changes group description. The query is a JSON object with the following fields: 
          - **name** - name of the group 
          - **description** - description of the group
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addGroupDto'
      responses:
        '200':
          description: "OK"
        '403':
          description: "Forbidden"
  /api/groups/{groupId}:
    delete:
      security:
        - basicAuth: []    
      tags:
        - groups
      summary: (Admin) Deleting group
      description: Deletes group with given id
      parameters:
        - in: path
          name: groupId
          description: Id of the group
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "OK"
        '403':
          description: "Forbidden"
  /api/activities/find/byView/{viewId}:
    post:
      security:
        - basicAuth: []
      tags:
        - activities
        - views
      summary: Get activity id, process id, process data from view.
      description: Retrieves a count and results list from view. Enable to filter results with filter lists
      parameters:
        - name: viewId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the view to search
        - name: start
          in: query
          required: true
          schema:
            type: integer
          description: Starting index for pagination
        - name: limit
          in: query
          required: true
          schema:
            type: integer
          description: Maximum number of results to return
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
          description: Sorting property. Only variables/headers defined in view configuration can be used. For headers use names specified in requestBody section. For incorrect sorting property API returns 0 results without any error message. When not present processId is default value.
        - name: sortDirection
          in: query
          required: false
          schema:
            type: string
          description: Sorting direction. Possible values are ASC or DESC. When not present ASC is default value.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityViewSearchCriteria"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityViewFinderResults"
        "403":
          description: Forbidden
        "400":
          description: Bad Request






  /api/activities/my:
    get:
      tags:
        - activities
      summary: Downloading the task box of a logged-in user
      operationId: getTaskBox
      description:
        The answer contains a list of objects storing information about the user's tasks
      parameters:
        - in: query
          name: start
          description: The offset in the result set
          schema:
            type: integer
        - in: query
          name: limit
          description: The maximum number of returned results
          schema:
            type: integer
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getTaskBox'
        '400':
          description: Bad input parameter
  /api/activities/my/executed:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Downloading tasks performed by the user
      operationId: getExecutedTask
      description:
        The response contains a list of objects storing information about the user's tasks. The example is the same as Downloading the task box of the logged-in user. In this case, the finishDate field is populated with the end date of the task.
      parameters:
        - in: query
          name: start
          description: The offset in the result set
          schema:
            type: integer
        - in: query
          name: limit
          description: The maximum number of returned results
          schema:
            type: integer
      responses:
        '200':
          description: Search results matching criteria
        '400':
          description: Bad input parameter
  /api/activities/{processId}/{activityId}:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Downloading task (from version 3.1.43)
      operationId: getTask
      description:
        Response object storing information about the task
      parameters:
        - in: path
          name: processId
          description: Id of the process to which the task belongs
          required: true
          schema:
            type: string
        - in: path
          name: activityId
          description: Id of the task we are downloading
          required: true          
          schema:
            type: string
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getTask'
        '400':
          description: Bad input parameter  
  /api/activities/accept:
    post:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Task acceptance
      operationId: acceptTask
      description: |
        JSON object containing acceptance parameters: 
        - **processId** - Id of the process
        - **activityId** - Id of the activity
        - **contextMap** - Map of variable values
        - **actionName** - Name of acceptance button 
      requestBody:
        content:
          application/json:
            schema:      
              type: object
              properties:
                 processId:
                    type: string 
                 activityId:
                    type: string
                 actionName :
                    type: string  
                 contextMap:
                    type: object
                    properties:
                      variableId: 
                        type: string
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/acceptTask'
        '400':
          description: Bad input parameter  
  /api/activities/context:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Getting the values of task variables
      operationId: getTaskValues
      description:
        An object that stores variable values
      parameters:
        - in: query
          name: processId
          required: true
          description: Id of the process to which the task belongs
          schema:
            type: string
        - in: query
          name: activityId
          required: true          
          description: Id of the task we are downloading
          schema:
            type: string
        - in: query
          name: extended
          description: Defaults to false. Returns extended variable values in the form of an object having a value field or an object having value and displayValue fields. For the moment, support for fields with the EXTYPE = USERNAME extended attribute has been introduced, which allows you to return an object containing the value (user login) and displayValue (name) fields
          schema:
            type: boolean   
            default: false
      responses:
        '200':
          description: Search results matching criteria
        '400':
          description: Bad input parameter              
  /api/activities/save:
    post:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Saving the task variables
      operationId: saveTaskVariables
      description: |
        JSON object containing acceptance parameters 
        - **processId** - Id of the process
        - **activityId** - Id of the activity
        - **contextMap** - Map of variable values
      requestBody:
        content:
          application/json:
            schema:      
              type: object
              properties:
                 processId:
                    type: string 
                 activityId:
                    type: string
                 actionName :
                    type: string  
                 contextMap:
                    type: object
                    properties:
                      variableId: 
                        type: string
      responses:
        '200':
          description: Search results matching criteria
        '400':
          description: Bad input parameter      
  /api/activities/open:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Task entry
      operationId: taskEntry
      description:
        Opens a task with the passed parameters
      parameters:
        - in: query
          name: processId
          required: true
          description: Id of the process to which the task belongs
          schema:
            type: string
        - in: query
          name: activityId
          required: true          
          description: Id of the task 
          schema:
            type: string
      responses:
        '200':
          description: Opens a task
        '400':
          description: Bad input parameter     
  /api/activities/opened:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Task acceptance
      operationId: getOpenTask
      description:
        List of objects storing information about open tasks in the specified process
      parameters:
        - in: query
          name: processId
          required: true
          description: Id of the process to which the task belongs
          schema:
            type: string
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getTask'
        '400':
          description: Bad input parameter    
  /api/activities/abort:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Task aborting
      description: Aborting task with given activityId and processId
      parameters:
        - in: query
          name: processId
          required: true
          description: Id of the process to which the task belongs
          schema:
            type: string
        - in: query
          name: activityId
          required: true
          description: Id of the activity
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '403':
          description: Forbidden   
  /api/activities/resume:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Task resuming
      description: Resuming task with given activityId and processId
      parameters:
        - in: query
          name: processId
          required: true
          description: Id of the process to which the task belongs
          schema:
            type: string
        - in: query
          name: activityId
          required: true
          description: Id of the activity
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '403':
          description: Forbidden   
  /api/activities/suspend:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Task suspending
      description: Suspending task with given activityId and processId
      parameters:
        - in: query
          name: processId
          required: true
          description: Id of the process to which the task belongs
          schema:
            type: string
        - in: query
          name: activityId
          required: true
          description: Id of the activity
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '403':
          description: Forbidden   
  /api/activities/advanced/my/finished/{state}:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Downloading finished tasks
      description: Retrieves a list of finished activities for user with state
      parameters:
        - in: path
          name: state
          required: true
          description: State of the tasks
          schema:
            $ref: '#/components/schemas/finishedUserActivityState'
        - name: "processDefinitionIds"
          in: "query"
          description: "List of id definitions of processes to which open tasks can belong or empty"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "activityDate"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "DESC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: Ok
        '403':
          description: Forbidden   
  /api/activities/advanced/my/finished/{state}/count:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Downloading finished tasks count
      description: Retrieves a count of finished activities for user with state
      parameters:
        - in: path
          name: state
          required: true
          description: State of the tasks
          schema:
            $ref: '#/components/schemas/finishedUserActivityState'
        - name: "processDefinitionIds"
          in: "query"
          description: "List of id definitions of processes to which open tasks can belong or empty"
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Ok
        '403':
          description: Forbidden   
  /api/activities/advanced/my/finished/{state}/export/{extension}:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Exporting list of finished tasks
      description: Exports a list of finished activities for user with state
      parameters:
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - in: path
          name: state
          required: true
          description: State of the tasks
          schema:
            $ref: '#/components/schemas/finishedUserActivityState'
        - name: "processDefinitionIds"
          in: "query"
          description: "List of id definitions of processes to which open tasks can belong or empty"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "activityDate"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "DESC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: Ok
        '403':
          description: Forbidden   
  /api/activities/advanced/my/finished/{state}/processTypes:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Downloading process types for finished activities
      description: Retrieves a list of process types for finished activities
      parameters:
        - in: path
          name: state
          required: true
          description: State of the tasks
          schema:
            $ref: '#/components/schemas/finishedUserActivityState'
        - name: "processDefinitionIds"
          in: "query"
          description: "List of id definitions of processes to which open tasks can belong or empty"
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Ok
        '403':
          description: Forbidden   
  /api/activities/advanced/my/open/{state}:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Downloading finished tasks
      description: Retrieves a list of finished activities for user with state
      parameters:
        - in: path
          name: state
          required: true
          description: State of the tasks
          schema:
            $ref: '#/components/schemas/openUserActivityState'
        - name: "processDefinitionIds"
          in: "query"
          description: "List of id definitions of processes to which open tasks can belong or empty"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "activityDate"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "DESC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: Ok
        '403':
          description: Forbidden   
  /api/activities/advanced/my/open/{state}/count:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Downloading finished tasks count
      description: Retrieves a count of finished activities for user with state
      parameters:
        - in: path
          name: state
          required: true
          description: State of the tasks
          schema:
            $ref: '#/components/schemas/openUserActivityState'
        - name: "processDefinitionIds"
          in: "query"
          description: "List of id definitions of processes to which open tasks can belong or empty"
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Ok
        '403':
          description: Forbidden   
  /api/activities/advanced/my/open/{state}/export/{extension}:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Exporting list of finished tasks
      description: Exports a list of finished activities for user with state
      parameters:
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - in: path
          name: state
          required: true
          description: State of the tasks
          schema:
            $ref: '#/components/schemas/openUserActivityState'
        - name: "processDefinitionIds"
          in: "query"
          description: "List of id definitions of processes to which open tasks can belong or empty"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "activityDate"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "DESC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: Ok
        '403':
          description: Forbidden   
  /api/activities/advanced/my/open/{state}/processTypes:
    get:
      security:
        - basicAuth: []    
      tags:
        - activities
      summary: Downloading process types for finished activities
      description: Retrieves a list of process types for finished activities
      parameters:
        - in: path
          name: state
          required: true
          description: State of the tasks
          schema:
            $ref: '#/components/schemas/openUserActivityState'
        - name: "processDefinitionIds"
          in: "query"
          description: "List of id definitions of processes to which open tasks can belong or empty"
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Ok
        '403':
          description: Forbidden   
  /api/documents/query:
    get:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Downloading document information from the process
      operationId: getDocument
      description:
        The answer contains a list of documents
      parameters:
        - in: query
          name: processId
          required: true          
          description: Id of the process for which we want to download documents
          schema:
            type: string
        - in: query
          name: activityId 
          required: true          
          description: Id of the task for which we want to download documents. If not specified, all documents from the process will be downloaded.
          schema:
            type: string            
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getDocument'
        '400':
          description: Bad input parameter    
    post:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Search for documents based on filters
      operationId: docSearch
      description: |
        The method searches for documents based on the specified filters. User rights are taken into account. You can search by document class (the id of the document class must be specified in the **documentClassId** parameter) or document set (the id of the document set must be specified in the **documentSetId** parameter).<br> You cannot search by document class and document set at the same time (only one parameter can be completed). Currently, the indexes of the document class/document set are still an additional filter. <br>If you do not specify indexes, all documents from the specified document class/document set will be searched. <br> 
        > **From version 4.1.2** - The maximum number of documents returned in a single call is 100,000
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                documentClassId: 
                  type: integer
                  example: 2
                documentSetId: 
                  type: integer
                  example: 3                
                indexes: 
                  type: object
                  properties:
                    1:
                      oneOf:
                        - type: string
                        - type: integer
                        - type: number
                          format: float
                      example: Index value with id 2
                    148:
                      type: object
                      properties:
                        from:
                          oneOf:
                            - type: string
                            - type: integer
                            - type: number
                              format: float
                          example: 2023-12-01 17:10:00
                        to:
                          oneOf:                        
                            - type: string
                            - type: integer
                            - type: number
                              format: float
                          example: 2023-12-05
                start: 
                  type: integer
                  example: 0        
                limit: 
                  type: integer
                  example: 0                     
                fromDate: 
                  type: string
                  example: 2023-09-07               
                endDate: 
                  type: string
                  example: 2023-09-07 12:08               
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/docSearch'
        '400':
          description: Bad input parameter     
  /api/documents/query/count:          
    post:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Search for documents based on filters (from version 4.1.2)
      description:
          The method searches for the number of documents based on the specified filters. User permissions are taken into account. <br>The quantity can be searched by document class (the id of the document class must be specified in the **documentClassId** parameter) or by document set (the id of the document set must be specified in the **documentSetId** parameter). <br>You cannot search by document class and document set at the same time (only one parameter can be completed). Currently, an additional filter is still document class/document set indexes. If you do not specify indexes, the number of all documents from the specified document class/document set will be searched.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                documentClassId: 
                  type: integer
                  example: 2
                documentSetId: 
                  type: integer
                  example: 3                
                indexes: 
                  type: object
                  properties:
                    1:
                      oneOf:
                        - type: string
                        - type: integer
                        - type: number
                          format: float
                      example: Index value with id 2
                    148:
                      type: object
                      properties:
                        from:
                          oneOf:
                            - type: string
                            - type: integer
                            - type: number
                              format: float
                          example: 2023-12-01 17:10:00
                        to:
                          oneOf:                        
                            - type: string
                            - type: integer
                            - type: number
                              format: float
                          example: 2023-12-05
                start: 
                  type: integer
                  example: 0        
                limit: 
                  type: integer
                  example: 0                     
                fromDate: 
                  type: string
                  example: 2023-09-07               
                endDate: 
                  type: string
                  example: 2023-09-07 12:08        
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/docSearch'
        '400':
          description: Bad input parameter                  
  /api/documents/view/query:
    get:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Downloading extended document information from the process
      operationId: getDocumentInfo
      description:
        The answer contains a list of documents
      parameters:
        - in: query
          name: processId
          required: true          
          description: Id of the process for which we want to download documents
          schema:
            type: string
        - in: query
          name: activityId 
          required: true          
          description: Id of the task for which we want to download documents. If not specified, all documents from the process will be downloaded.
          schema:
            type: string            
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getDocumentInfo'
        '400':
          description: Bad input parameter    
  /api/documents/classes:
    get:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Download available document classes
      operationId: getClasses
      description:
        The answer contains a list of document classes to which the logged-in user has permissions
      parameters:
        - in: query
          name: rightType
          description: |
            Type of rights to add documents to the system: 
            - **ALL** - to process or archive
            - **PROCESS** - to process
            - **ARCHIVE** - to archive
          schema:
            type: string
            enum: [ALL, PROCESS, ARCHIVE]
      responses:
        '200':
          description: Search results matching criteria
        '400':
          description: Bad input parameter        
  /api/documents/indexes/{documentClassId}:
    get:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Downloading indexes for a class of documents
      operationId: getIndexes
      description:
        The answer contains a list of indexes from the selected document class
      parameters:
        - in: path
          required: true
          name: documentClassId
          description: Id of document class (parameter passed in servlet path)
          schema:
            type: integer
      responses:
        '200':
          description: Search results matching criteria
        '400':
          description: Bad input parameter        
  /api/documents/upload: # do sprawdzenia bo mo≈ºe ≈∫le wysy≈Çaƒá, rozwa≈ºyƒá zmianƒô schematu
    post:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Add document
      operationId: addDocument
      description:
        Allows you to add a document to the system to the selected document class, to a process or to an activity. 
      requestBody:
        description: |
          HTML form containing the definition of the document:
          - If you specify the parameters `activityid` and `processid`, the document will be added to the archive and connected to the indicated activity.
          - If you specify only `processId`, the document will be added to the archive and connected to the indicated process.
          - If you do **not specify** activityid and processid or specify only activityId, the document will be added to the archive only.
        content:
          multipart/form-data:
            schema: 
              type: object
              properties:
                file: 
                  type: string
                  format: binary
                  description: Select a file from disk to add
                activityId:
                  type: string
                  description: Id of the activity, optional parameter
                processId:
                  type: string
                  description: Id of the process, optional parameter
                documentClassId: 
                  type: integer
                  description: Id of the document class         
                description: 
                  type: string    
                  description: Description of the document
                newVersion: 
                  type: boolean         
                  description: Specify whether to save the document as a new version
                indexes: 
                  type: array
                  description: Value of the index in format `indexes[index_id]`:` ‚Äúvalue‚Äù`
                  items:
                    type: integer
                    description: Array 
                indexesJson: 
                  type: object
                  description: From version 4.0.39. Optional, to be specified in conjunction with the query parameter `indexesAsJson=true`. The index values of the document to be added. 
                  properties:
                    indexid:
                      type: string
                indexesAsJson:
                  type: boolean
                  description: A flag indicating if the indexes are provided in JSON format.  
              required:
                - file
                - documentClassId
                - newVersion
 #      parameters:
 #        - in: query
 #          name: indexesAsJson 
 #          description: From version 4.0.39 - (optional, true/false) indexes are transferred in JSON format (form indexesJson field)
 #          schema:
 #            type: boolean
      responses:
        '200':
          description: Search results matching criteria
        '400':
          description: Bad input parameter           
  /api/documents/download/{fileId}:
    get:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Download document
      operationId: getDocumentId
      description:
        Downloads the document with the specified file id
      parameters:
        - in: path
          name: fileId
          description: Id of the file you want to download (parameter passed in the servlet path)
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Search results matching criteria
        '400':
          description: Bad input parameter        
  /api/documents/download/{filename}:
    get:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Get document
      operationId: getDocumentFile
      description: |
        Downloads the document file. 
        > Note, the system parameter AuthorizeUserForFile determines whether user authorization is required for this servlet.
      parameters:
        - in: path
          name: filename
          description: File name with extension (passed in servlet path)
          schema:
            type: string
          required: true
        - in: query
          name: fileId 
          description: Id of the file you want to download 
          schema:
            type: integer
          required: true          
        - in: query
          name: processId
          description: Id of the process for which we want to download documents
          schema:
            type: string
          required: false            
        - in: query
          name: activityId
          description: Id of the task for which we want to download documents
          schema:
            type: string
          required: false             
      responses:
        '200':
          description: Search results matching criteria
        '400':
          description: Bad input parameter       
  /api/documents/activity:
    get:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Download information about connected documents to an activity
      operationId: getDocTask
      description:
         Information about the documents, i.e. besides the files, also additional information about the document, e.g. by whom it was connected to the archive and by whom it was connected to the process, etc
      parameters:
        - in: query
          name: processId
          required: true
          description: Id of the process for which we want to download documents
          schema:
            type: string
        - in: query
          name: activityId
          required: true          
          description:  Id of the task for which we want to download documents
          schema:
            type: string            
      responses:
        '200':
          description: Search results matching criteria
        '400':
          description: Bad input parameter         
  /api/documents/{fileId}/{processId}:
    delete:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Disconnecting a document from a process
      operationId: deleteDocument
      description:
         Disconnects the document from the indicated process, but the document is still available in the system
      parameters:
        - in: path
          name: fileId
          description: Id of the file we want to remove ( parameter passed in the servlet path)
          schema:
            type: string
          required: true
        - in: path
          name: processId
          description: Id of the process from which we are removing the document
          schema:
            type: string      
          required: true            
      responses:
        '204':
          description: The query was successful
        '400':
          description: Bad input parameter     
  /api/documents/{fileId}:
    delete:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Delete document (from version 3.1.31)
      operationId: deleteDocumentFile
      description:
         The method removes the file from the system. If the file to be deleted is version ex 2, and the whole document is version 5, then all versions upwards will be deleted, i.e. only version 1 file will be left, unless the parameter `deleteAllVersions=true`, then all versions will be deleted.
      parameters:
        - in: path
          name: fileId
          description: Id of the file you want to delete (parameter passed in the servlet path)
          schema:
            type: string
          required: true
        - in: query
          name: deleteAllVersions
          description: Specifies whether all previous versions of this document are also to be deleted
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: The query was successful
        '400':
          description: Bad input parameter      
  /api/documents/{fileId}/indexes:
    put:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Change of document index values (from version 3.1.31)
      operationId: changeDocValues
      description:
        The method changes the passed index values in the specified document. The user must have permission to modify the document.
      parameters:
        - in: path
          name: fileId
          description: Id of the file whose indexes we want to change (parameter passed in the servlet path)
          schema:
            type: integer
          required: true
        - in: query
          name: indexes
          description: JSON object containing the indexes to be changed
          required: true          
          schema:
            type: object
            properties:
              indexid:
                type: string
      responses:
        '200':
          description: Search results matching criteria
        '400':
          description: Bad input parameter      
    
  /api/documents/{fileId}/versions:
    get:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Get all versions of the document
      operationId: getAllVer
      description:
        Returns a list of searched documents
      parameters:
        - in: path
          name: fileId
          description: Id of the file for which we want to download all versions (parameter passed in servlet path)
          schema:
            type: integer
          required: true
           
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getAllVer'
        '400':
          description: Bad input parameter        
  /api/documents/{fileId}/checkOut:
    put:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Changes the data in the database regarding the downloaded document
      operationId: changeData
      description:
        Changes the data in the database regarding the downloaded document to be changed. Sets the appropriate status, date of downloading the document, and downloading user
      parameters:
        - in: path
          name: fileId
          description: Id of the file (parameter passed in servlet path)
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden           
        '409':
          description: Conflict           
  /api/documents/{fileId}/undoCheckOut:
    put:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Cancels making changes to a downloaded document
      operationId: undoChangeData
      description:
        Cancels making changes to the document. Sets the appropriate status, resets the document download date and the downloading user.
      parameters:
        - in: path
          name: fileId
          description: Id of the file (parameter passed in servlet path)
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        '409':
          description: Conflict     
  /api/documents/checkIn:
    post:
      security:
        - basicAuth: []    
      tags:
        - documents    
      summary: Saves a new version of the file we previously downloaded to change
      requestBody:
        description: HTML form containing the definition of the document. The definition should include the following fields
        content:
          multipart/form-data:
            schema: 
              type: object
              properties:
                file: 
                  type: string
                  format: binary
                  description:  New version of changed document
                description:
                  type: string
                  description: Description of the new document
                parentFileId:
                  type: integer
                  description: Id of the file to be updated
                comment: 
                  type: string
                  description: Comment for new document
              required:
                - file
                - parentFileId
              
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter     
  /api/documents/{fileId}/status:
    get:
      security:
        - basicAuth: []    
      tags:
        - documents
      summary: Download the current status of a document
      operationId: getStatus
      description:
        Current document status
      parameters:
        - in: path
          name: fileId
          description: Id of the file (parameter passed in servlet path)
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: string  
                example: STATE_READY
        '400':
          description: Bad input parameter        
  /api/comments:
    post:
      security:
        - basicAuth: []    
      tags:
        - comments
      summary: Add comment
      operationId: addComment    
      description: |
        The response contains a comment definition object (with the userId, timestamp, and id fields completed) 
        - **processId** - id of the process 
        - **activityId** - id of the activity 
        - **comment** - comment content <br> Each comment in the system has information about the user who wrote it, and the date it was added. When saving a comment using the above servlet, the user is retrieved from the session, and the date is set to the current one.
      requestBody:
        content:
          application/json:
            schema:
              type: object 
              properties:
                processId:
                  type: string 
                activityId:
                  type: string
                comment:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter         
  /api/comments/{commentId}:
    get:
      security:
        - basicAuth: []    
      tags:
        - comments
      summary: Download comment by id
      operationId: getComment
      description:
        The answer includes a comment definition object
      parameters:
        - in: path
          name: commentId
          description: Id of the comment (parameter passed in servlet path)
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter          
    delete:
      tags:
        - comments
      summary: Delete comment
      operationId: deleteCopmment
      description:
        Delete the comment with the indicated id
      parameters:
        - in: path
          name: commentId
          description: Id of the comment
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter   
  /api/comments/query:
    get:
      security:
        - basicAuth: []    
      tags:
        - comments
      summary: Downloading activity comments
      operationId: getCommentActivity
      description:
        The answer includes a comment definition object.      

      parameters:
        - in: query
          name: activityId
          description: Id of the activity
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter    
  /api/form:
    get:
      security:
        - basicAuth: []    
      tags:
        - activity form
      summary: Downloading form definitions
      operationId: getForm
      description:
        The answer contains a form definition object
      parameters:
        - in: query
          name: processId
          description: Id of the process
          schema:
            type: string
          required: true      
        - in: query
          name: activityId
          description: Id of the activity
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter  
  /api/form/autoupdate:
    post:
      security:
        - basicAuth: []    
      tags:
        - activity form
      summary: DEPRECATED AutoUpdate invocation
      operationId: autoUpdate
      description: |
        The answer contains a map of processed variable values from the destination parameter of the autoUpdate definition
        - **autoUpdate** - AutoUpdate definition (taken from the form defnition) 
        - **variables** - A map of variable values from the dataSource field in the autoUpdate definition. (The key in the map is the id of the variable)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                autoUpdate:
                  type: string
                variables:
                  type: object
                  properties:
                    variableId:
                      type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter  
  /api/form/datachooser:
    post:
      security:
        - basicAuth: []    
      tags:
        - activity form
      summary: DataChooser invocation
      operationId: dataChooser
      description: |
        Answer contains the list of data returned by datachooser
        - **className** - class of the datachooser 
        - **start** - start of data 
        - **limit** - number of records 
        - **orderProperty** - sorting field 
        - **order** - sorting direction (ASC/DESC) 
        - **criteria** - map of variable values 
        - **customKeys** - additional keys
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                className:
                  type: string
                start:
                  type: integer
                limit:
                  type: integer
                orderProperty:
                  type: string
                order:
                  type: string
                criteria:
                  type: object
                  properties:
                    crit:
                      type: string
                customKeys :
                  type: object
                  properties:
                    key:
                      type: string  
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter  
  /api/form/scripts:
    get:
      security:
        - basicAuth: []    
      tags:
        - activity form
      summary: Downloading form scripts
      operationId: getScript
      description:
        The answer contains the scripts used in the form
      parameters:
        - in: query
          name: processId
          description: Id of the process
          required: true
          schema:
            type: string
        - in: query
          name: activityId
          description: Id of the activity
          required: true
          schema:
            type: string             
        - in: query
          name: type
          required: true          
          description: Type of scripts (case sensitive)
          schema:
            type: string           
            enum: [DESKTOP,DESKTOP_FORM,DESKTOP_HISTORY,MOBILE,MOBILE_FORM,MOBILE_HISTORY]
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter    
  /api/authentication/login:
    post:
      security: []
      tags:
        - system login
      summary: Login
      operationId: login
      description:
        The response contains an identifier formed from the combination of the domain and the user's login.
      parameters:
        - in: query
          name: userName
          description: Login of the user
          required: true
          schema:
            type: string
        - in: query
          name: password 
          required: true          
          description: Password of the user
          schema:
            type: string             
        - in: query
          name: domainId
          description: Id of the domain
          schema:
            type: string     
        - in: query
          name: language
          description: The language of the system according to the java.util.Locale.language convention. This must be a supported language on the given system.
          schema:
            type: string                
      responses:
        '200':
          description: OK
          headers: 
            Set-Cookie:
              schema: 
                type: string
        '400':
          description: Bad input parameter    
  /api/authentication/logout:
    get:
      security:
        - basicAuth: []    
      tags:
        - system login
      summary: Logout
      operationId: logout
      description:
        Logout user out of the system
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter        
  /api/authentication/domains:
    get:
      security:
        - basicAuth: []    
      tags:
        - system login
      summary: Downloading a list of domains
      operationId: domains
      description:
        The response is a list of system domains in JSON format
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter
  /api/userdeactivation/processTypes:
    get:
      security:
        - basicAuth: []    
      tags:
        - user deactivation
      summary: Downloading process types and tasks from the system
      operationId: getProcessTypesForUser
      description: |
        The servlet returns a list of objects representing process information in **JSON** format. The structure of the returned objects contains the following fields: 
        **name**, **description**, **packageId**, **processDefId**, **children**.<br><br>
        The children field contains a list of objects representing process **roles**. 
        <br>
        The role object has fields:**id**, **name**, it also contains the **children** field containing the **types of tasks** from the role.<br> 
        <br>
        The structure of the task object contains fields: **name**, **activityDefId**, **assigned**. The assigned field takes the value true if the user given as a parameter is assigned to at least one task of a given type.
      parameters:
        - in: query
          name: userName
          description: Login of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter     
  /api/userdeactivation/change:
    post:
      security:
        - basicAuth: []    
      tags:
        - user deactivation
      summary: Change of task redirection of deactivated user
      operationId: deactivateUserChange
      requestBody:
        description: |
          The query is a JSON object containing the following fields: 
          * **userName** - user login for deactivation
          * **processes** - array of the processes in which the deactivated user participates
            * name - name of the process
            * description - description of the process
            * packageId - id of the package
            * processDefId - id of the process definition
            * children:
              * name - name of the role
              * id - id of the role
              * children [name] - name of the activity assigned to role
              * children [activityDefId] - activity definition identifier
              * children [assigned] - true if the user given as a parameter is assigned to at least one task of a given type
              * children [leaf] - default value: true
              * children [assignments] - an array of users/groups to whom activities have been assigned
              * children [group] - determine whether the units specified in the assignments parameter are groups
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deactivateUserChange'
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter       
  /api/userdeactivation/deactivate/processes:
    get:
      security:
        - basicAuth: []    
      tags:
        - user deactivation
      summary: Change of task redirection of deactivated user
      parameters:
        - in: query
          name: userName 
          required: true
          description: Login of the user
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter             
  /api/userdeactivation/emptyTaskUser:
    get:
      security:
        - basicAuth: []    
      tags:
        - user deactivation
      summary: EmptyTaskUser user download
      operationId: getEmptyTaskUser
      description:
        Servlet returns a user object
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter       
  /api/processes/create:
    post:
      security:
        - basicAuth: []    
      tags:
        - processes
      summary: Process creation
      operationId: processCreation
      requestBody:
        description: |
          The query contains a JSON object containing the acceptance parameters. The definition should include the following fields 
          - **packageId** - Id of the package 
          - **processDefId** - Id of the process definition 
          - **variables** - Map of variable values in which the key is the id of the variable
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/processCreation'
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter    
  /api/processes/types:
    get:
      security:
        - basicAuth: []    
      tags:
        - processes
      summary: Download available process types for the user
      operationId: getTypes
      description:
        Retrieves a list of available process types for the logged-in user
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter         
  /api/processes/definition/{processDefinitionId}/activities:
    get:
      tags:
        - processes
      summary: Downloading task information for a given process definition ID
      operationId: getProcess
      description:
        Returns a list of tasks (definition and name) from the latest package
      parameters:
        - in: path
          name: processDefinitionId
          description: Id of the process definition from which it should retrieve task information
          required: true
          schema:
            type: string        
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter
  /api/processes/abort:
    get:
      tags:
        - processes
      summary: Aborting process
      description:
        Aborts process with given processId
      parameters:
        - in: query
          name: processId
          description: Id of the process
          required: true
          schema:
            type: string        
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/processes/context:
    get:
      tags:
        - processes
      summary: Downloading process context
      description: Retrieves process context for given processId
      parameters:
        - in: query
          name: processId
          description: Id of the process
          required: true
          schema:
            type: string        
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/processes/delete:
    get:
      tags:
        - processes
      summary: Deleting process
      description: Deletes process with given processId
      parameters:
        - in: query
          name: processId
          description: Id of the process
          required: true
          schema:
            type: string        
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/processes/types/search:
    get:
      tags:
        - processes
      summary: Downloading search process types for view
      description: Retrieves search process types for view with given id
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/processes/types/search/{viewId}:
    get:
      tags:
        - processes
      summary: Downloading search process types
      description: Retrieves search process types
      parameters:
        - in: path
          name: viewId
          description: Id of the process
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/processes/{processId}/history:
    get:
      tags:
        - processes
      summary: Downloading process history
      description: Retrieves process history for process
      parameters:
        - in: path
          name: processId
          description: Id of the process
          required: true
          schema:
            type: string
        - in: query
          name: rightKey
          description: Rights key of the process
          schema:
            type: string
        - in: query
          name: showSystemTasks
          description: Specify whether to show system tasks
          schema:
            type: string
            default: true
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden

  /api/xpdlInfo/checkLoaded:
    get:
      security:
        - basicAuth: []    
      tags:
        - packages
      summary: Checking the loading of the package
      operationId: packageLoad
      description:
        The response contains information about whether the package is already loaded into the system. If so, its id is also returned.
      parameters:
        - in: query
          name: xpdlFilename
          description: XPDL file name with extension
          required: true
          schema:
            type: string        
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter      
  /api/logger/error:
    post:
      security:
        - basicAuth: []    
      tags:
        - server loggers
      summary: Error messages
      operationId: loggerError
      description:
        Servlet lets you log error messages on the server using Logger from the log4j library
      requestBody:
        description:
          The query contains a JSON object containing logging parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logger'       
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter      
  /api/logger/warn:
    post:
      security:
        - basicAuth: []    
      tags:
        - server loggers
      summary: Warning messages
      operationId: loggerWarn
      description:
        Servlet lets you log warning messages on the server using Logger from the log4j library
      requestBody:
        description:
          The query contains a JSON object containing logging parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logger'       
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter          
  /api/logger/info:
    post:
      tags:
        - server loggers
      summary: Information messages
      operationId: loggerInfo
      description:
        Servlet lets you log info messages on the server using Logger from the log4j library
      requestBody:
        description:
          The query contains a JSON object containing logging parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logger'       
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter        
  /api/logger/debug:
    post:
      security:
        - basicAuth: []    
      tags:
        - server loggers
      summary: Information messages
      operationId: loggerDebug
      description:
        Servlet lets you log debug messages on the server using Logger from the log4j library
      requestBody:
        description:
          The query contains a JSON object containing logging parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logger'       
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter      
  /api/logger/trace:
    post:
      security:
        - basicAuth: []    
      tags:
        - server loggers
      summary: Information messages
      operationId: loggerTrace
      description:
        Servlet lets you log trace messages on the server using Logger from the log4j library
      requestBody:
        description:
          The query contains a JSON object containing logging parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logger'       
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter    
  /api/rights/partial:
    get:
      security:
        - basicAuth: []    
      tags:
        - others
      summary: Downloading information about authority levels
      operationId: others
      description:
        Returns a list of permissions to processes (system.workflow.processes level), to archive documents (system.archive.docclasses level), to archive document sets ('system.archive.links level). <br> 
      parameters:
        - in: query
          name: resourceName
          description: User or user group name
          required: true
          schema:
            type: string        
        - in: query
          name: isGroup
          description: If true, the resourceName parameter contains the group name, if false it contains the user name
          required: true
          schema:
            type: boolean                
      responses:
        '200':
          description: OK
        '400':
          description: Bad input parameter    
  /api/system/configuration/transfer:
    get:
      security:
          - basicAuth: [] 
      tags:
        - system configuration
      summary: (Admin) Downloading system configuration
      description: Returns a string with the whole system configuration.
      responses:
        '403':
          description: Forbidden
        '200':
          description: OK
  /api/system/configuration/transfer/export:
    post:
      security:
          - basicAuth: [] 
      tags:
        - system configuration
      summary: (Admin) Downloading system configuration as json
      description: Returns a json with the whole system configuration.
      requestBody:
        description:
          The executed query exports system configuration as json. The query is a String with system configuration
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        '403':
          description: Forbidden
        '200':
          description: OK
  /api/system/configuration/transfer/import:
    post:
      security: 
        - basicAuth: []
      tags:
        - system configuration
      summary: (Admin) Importing json system configuration
      parameters:
      - name: "defaultPassword"
        description: Default password for imported users
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "defaultGroup"
        description: Default group for imported users
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "deactivateScheduledTasks"
        description: Deactivate imported scheduled tasks
        in: "query"
        schema:
          type: "boolean"
      responses:
        '403':
          description: Forbidden
        '200':
          description: "OK"
  /api/view/foruser:
    get:
      security:
          - basicAuth: [] 
      tags:
        - views
      summary: Downloading a list of views available to user
      description: Retrieves a list of available views for the logged-in user
      responses:
        '200':
          description: OK
  /api/view/myViews:
    get:
      security:
          - basicAuth: [] 
      tags:
        - views
      summary: Downloading a list of user's views
      description: Retrieves a list of logged-in user's views
      responses:
        '200':
          description: OK
  /api/view/myViews/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - views
      summary: Exporting a list of user's views
      description: Exporting a list of user's views for the logged-in user
      parameters:
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - name: "query"
          in: "query"
          description: "Filter views by name/description/owner"
          schema:
            type: "string"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "translatedName"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/view/myViews/{id}:
    delete:
      security:
          - basicAuth: [] 
      tags:
        - views
      summary: Deleting view
      description: Deletes a view with given id
      parameters:
      - name: "id"
        in: "path"
        description: "View id"
        required: true
        schema:
          type: "number"
          format: "int64"
      responses:
        '200':
          description: OK
    patch:
      security:
          - basicAuth: [] 
      tags:
        - views
      summary: Changing view
      description: Changes a view with given id
      parameters:
      - name: "id"
        in: "path"
        description: "View id"
        required: true
        schema:
          type: "number"
          format: "int64"
      requestBody:
        description: |
          The executed query changes the indicated view. The query is a JSON object with the following fields 
          - **name** - view name 
          - **description** - view description
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/viewDto'
      responses:
        '200':
          description: OK
  /api/view/myViews/{id}/protections:
    get:
      security:
          - basicAuth: [] 
      tags:
        - views
      summary: Downloading a list of view protections
      description: Retrieves a list of view's protections
      parameters:
      - name: "id"
        in: "path"
        description: "View id"
        required: true
        schema:
          type: "number"
          format: "int64"
      - name: "start"
        in: "query"
        description: "Result number from which results are to be returned"
        required: true
        schema:
          type: "number"
          format: "int32"
      - name: "limit"
        in: "query"
        description: "Number of returned results"
        required: true
        schema:
          type: "number"
          format: "int32"
      - name: "sortBy"
        in: "query"
        description: "Sort by"
        schema:
          type: "string"
          default: "isGroup"
      - name: "sortDirection"
        in: "query"
        schema:
          type: string
          default: "DESC"
          enum:
            - ASC
            - DESC
        description: "Sort direction"
      responses:
        '200':
          description: OK
    post:
      security:
          - basicAuth: []
      tags:
        - views
      summary: Adding view protection
      description: Adds a protection to specified view
      parameters:
      - name: "id"
        in: "path"
        description: "View id"
        required: true
        schema:
          type: "number"
          format: "int64"
      requestBody:
        description: |
          The executed query adds protection the indicated view. The query is a JSON object with the following fields 
          - **viewId** - view Id 
          - **shareUserId** - user/group name 
          - **isGroup** - is resource a group 
          - **permissionLevel** - permission level (PREVIEW, EDIT)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/viewProtectionDto'
      responses:
        "200":
          description: "OK"
  /api/view/myViews/{id}/protections/{protectionId}:
    delete:
      security:
          - basicAuth: []
      summary: Deleting view protection
      description: Deletes protection with given id
      tags:
        - views
      parameters:
      - name: "id"
        in: "path"
        description: "View id"
        required: true
        schema:
          type: "number"
          format: "int64"
      - name: "protectionId"
        in: "path"
        description: "Protection id"
        required: true
        schema:
          type: "number"
          format: "int64"
      responses:
        "200":
          description: "OK"
  /api/view/myViews/{id}/protections/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - views
      summary: Exporting a list of view protections
      description: Exports a list of view's protections
      parameters:
      - name: "id"
        in: "path"
        description: "View id"
        required: true
        schema:
          type: "number"
          format: "int64"
      - name: "extension"
        in: "path"
        description: "Extension"
        required: true
        schema:
          $ref: '#/components/schemas/extension'
      - name: "sortBy"
        in: "query"
        description: "Sort by"
        schema:
          type: "string"
      - name: "sortDirection"
        in: "query"
        schema:
          type: string
          default: "ASC"
          enum:
            - ASC
            - DESC
        description: "Sort direction"
      responses:
        "200":
          description: "OK"
  /api/view/myViews/{id}/variables:
    get:
      security:
          - basicAuth: [] 
      tags:
        - views
      summary: Downloading a list of view distinctions
      description: Retrieves a list of view's distinctions
      parameters:
      - name: "id"
        in: "path"
        description: "View id"
        required: true
        schema:
          type: "number"
          format: "int64"
      - name: "start"
        in: "query"
        description: "Result number from which results are to be returned"
        required: true
        schema:
          type: "number"
          format: "int32"
      - name: "limit"
        in: "query"
        description: "Number of returned results"
        required: true
        schema:
          type: "number"
          format: "int32"
      - name: "sortBy"
        in: "query"
        description: "Sort by"
        schema:
          default: "variableName"
          type: "string"
      - name: "sortDirection"
        in: "query"
        schema:
          type: string
          default: "ASC"
          enum:
            - ASC
            - DESC
        description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/view/myViews/{id}/variables/{variableId}:
    delete:
      security:
          - basicAuth: []
      tags:
        - views
      summary: Deleting view distinction
      description: Deletes distinction
        - views
      parameters:
      - name: "id"
        in: "path"
        description: "View id"
        required: true
        schema:
          type: "number"
          format: "int64"
      - name: "variableId"
        in: "path"
        description: "Distinction id"
        required: true
        schema:
          type: "number"
          format: "int64"
      responses:
        "200":
          description: "OK"
          
  /api/search/advance/view/{viewId}/export/{extension}:
    get:
      summary: View export
      tags: 
        - views
      description: Exports data from the specified view to the selected file format.
      parameters:
        - name: viewId
          in: path
          required: true
          description: View ID for export.
          schema:
            type: integer
        - name: extension
          in: path
          required: true
          description: Export format.
          schema:
            type: string
            enum: [pdf, excel, csv]
        - name: arrayResultsInOneRow
          in: query
          required: false
          description: Should the results be displayed on a single line.
          schema:
            type: boolean
            example: false
        - name: sortBy
          in: query
          required: false
          description: The name of the column by which the results are sorted.
          schema:
            type: string
            example: name
        - name: sortDirection
          in: query
          required: false
          description: Sorting direction 
          schema:
            type: string
            enum: [ASC, DESC]
            example: ASC
      responses:
        '200':
          description: Exports completed successfully.
  /api/certificates:
    get:
      security:
          - basicAuth: [] 
      tags:
        - certificates
      summary: (Admin) Downloading a list of certificates
      description: Retrieves a list of certificates
      responses:
        '200':
          description: OK
    put:
      security:
          - basicAuth: []
      tags:
        - certificates
      summary: (Admin) Editing certificate alias
      description: Edits certificate alias with given name
      requestBody:
        description: |
          The executed query edits certifacte name. The query is a JSON object with the following fields 
          - **alias** - name of the alias to change
          - **newAlias** - new name of the alias
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/renameAliasDto'
      responses:
        "200":
          description: "OK"
    delete:
      security:
          - basicAuth: []
      tags:
        - certificates
      summary: (Admin) Deleting certificate
      description: Deletes certificate with given name
      parameters:
      - name: "alias"
        in: "query"
        description: "Certificate alias name"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
  /api/certificates/ldap:
    get:
      security:
          - basicAuth: [] 
      tags:
        - certificates
      summary: (Admin) Downloading a list of ldap certificates
      description: Retrieves a list of ldap certificates
      responses:
        '200':
          description: OK
  /api/certificates/exportCert:
    get:
      security:
          - basicAuth: [] 
      tags:
        - certificates
      summary: (Admin) Downloading certificate data
      description: Downloads certificate data with given alias
      parameters:
      - name: "alias"
        in: "query"
        description: "Certificate alias name"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: OK
  /api/certificates/exportKeyStore:
    get:
      security:
          - basicAuth: [] 
      tags:
        - certificates
      summary: (Admin) Downloading key store file
      description: Downloads key store file from certificates tab
      responses:
        '200':
          description: OK
  /api/certificates/exportTable/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - certificates
      parameters:
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "alias"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      summary: (Admin) Downloading key store file
      description: Downloads key store file from certificates tab
      responses:
        '200':
          description: OK
  /api/certificates/extended:
    get:
      security:
          - basicAuth: [] 
      tags:
        - certificates
      summary: (Admin) Downloading an extended list of certificates
      description: Downloads an extended list of certificates
      parameters:
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "alias"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/certificates/system:
    get:
      security:
          - basicAuth: [] 
      tags:
        - certificates
      summary: (Admin) Downloading a list of system certificates
      description: Retrieves a list of system certificates
      responses:
        '200':
          description: OK
  /api/certificates/system/exportCert:
    get:
      security:
          - basicAuth: [] 
      tags:
        - certificates
      summary: (Admin) Downloading system certificate data
      description: Downloads system certificate data with given alias
      parameters:
      - name: "alias"
        in: "query"
        description: "Certificate alias"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: OK
  /api/certificates/system/exportTable/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - certificates
      parameters:
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "alias"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      summary: (Admin) Downloading system certificates file
      description: Downloads system certificates file from certificates tab
      responses:
        '200':
          description: OK
  /api/certificates/system/extended:
    get:
      security:
          - basicAuth: [] 
      tags:
        - certificates
      summary: (Admin) Downloading a list of certificates
      description: Downloads a list of certificates in certificates tab
      parameters:
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "alias"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/user/settings/appearance:
    get:
      security:
          - basicAuth: [] 
      tags:
        - appearance
      summary: Downloading a map of user settings
      description: Retrieves a map of logged-in user settings
      responses:
        '200':
          description: OK
    post:
      security:
        - basicAuth: []    
      tags:
        - appearance
      summary: Saves user settings
      description: Saves logged-in user settings
      requestBody:
        description: |
          The executed query changes the settings of logged-in user. The query is a JSON object with the following fields 
          - **language** - language of the system (en, pl...) 
          - **template** - theme (pwfl-blue, pwfl-dark, pwfl-high-contrast) 
          - **compactTemplate** - interface appearance (default, compact) 
          - **pageSize** - number of items per page (10, 20, 30, 50) 
          - **defaultView** - default view
          - **notifs** - show  (on, off) 
          - **emails** - receive email notifications (on, off) 
          - **viewAvatar** - avatar display in views (avatarOnly, avatarWithFirstAndLastName) 
          - **taskAvatar** - avatar display in task box (avatarOnly, avatarWithFirstAndLastName)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userSettingsForm'
      responses:
        '200':
          description: OK
  /api/user/settings/locale:
    get:
      security:
          - basicAuth: [] 
      tags:
        - appearance
      summary: Downloading user's language
      description: Retrieves a logged-in user's language
      responses:
        '200':
          description: OK
  /api/user/settings/appearance/globally:
    post:
      security:
        - basicAuth: []    
      tags:
        - appearance
      summary: (Admin) Saves user settings for user/group
      description: Saves user settings for user/group
      requestBody:
        description: |
          The executed query changes the settings of logged-in user. The query is a JSON object with the following fields 
          - **resourceName** - name of the resource 
          - **isGroup** - is resource a group 
          - **language** - language of the system (en, pl...) 
          - **template** - theme (pwfl-blue, pwfl-dark, pwfl-high-contrast) 
          - **compactTemplate** - interface appearance (default, compact) 
          - **pageSize** - number of items per page (10, 20, 30, 50) 
          - **defaultView** - default view 
          - **notifs** - show  (on, off) 
          - **emails** - receive email notifications (on, off) 
          - **viewAvatar** - avatar display in views (avatarOnly, avatarWithFirstAndLastName) 
          - **taskAvatar** - avatar display in task box (avatarOnly, avatarWithFirstAndLastName)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userGlobalSettingsForm'
      responses:
        '200':
          description: OK
  /api/user/settings/default-views:
    get:
      security:
          - basicAuth: [] 
      tags:
        - appearance
      summary: Downloading available default views
      description: Retrieves a list of views available to logged-in user
      responses:
        '200':
          description: OK
  /api/user/settings/document/views:
    get:
      security:
          - basicAuth: [] 
      tags:
        - appearance
      summary: Downloading a list of user document views
      description: Retrieves a list of user document views
      parameters:
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          schema:
            type: "number"
            format: "int32"
            default: 0
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
            default: 20
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "documentViewName"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
    post:
      security:
        - basicAuth: []    
      tags:
        - appearance
      summary: Saves user document view
      description: Saves document view for logged-in user
      requestBody:
        description: |
          The executed query saves document view for logged-in user. The query is a JSON object with the following fields 
          - **documentViewName** - view name (required) 
          - **documentViewDesc** - view description 
          - **procDefId** - process definition id of the process 
          - **taskDefId** - task definition id (requires process definition id) 
          - **docClassId** - document class id 
          - **descending** - show documents in descending order 
          - **amount** - amount of documents (required)
          - **regex** - regex 
          - **showOn** - display on form, history, all (SHOW_FORM, SHOW_HISTORY, SHOW_ALL)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addUserDocumentView'
      responses:
        '200':
          description: OK
          
  /api/user/settings/document/views/{viewId}:
    patch:
      security:
        - basicAuth: []    
      tags:
        - appearance
      summary: Updates user document view
      description: Updates document view with specified id for logged-in user
      parameters:
        - name: "viewId"
          in: "path"
          description: "View id"
          required: true
          schema:
            type: integer
      requestBody:
        description: |
          The executed query saves document view for logged-in user. The query is a JSON object with the following fields 
          - **documentViewName** - view name (required) 
          - **documentViewDesc** - view description 
          - **procDefId** - process definition id of the process 
          - **taskDefId** - task definition id (requires process definition id) 
          - **docClassId** - document class id 
          - **descending** - show documents in descending order 
          - **amount** - amount of documents (required)
          - **regex** - regex 
          - **showOn** - display on form, history, all(SHOW_FORM, SHOW_HISTORY, SHOW_ALL)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addUserDocumentView'
      responses:
        '200':
          description: OK
    delete:
      security:
          - basicAuth: []
      summary: Deleting user document view
      description: Deletes document view with given id
      tags:
        - appearance
      parameters:
      - name: "viewId"
        in: "path"
        description: "Document view id"
        required: true
        schema:
          type: "number"
          format: "int64"
      responses:
        "200":
          description: "OK"
  /api/positions:
    get:
      security:
          - basicAuth: [] 
      tags:
        - positions
      summary: (Admin) Downloading a list of positions
      description: Retrieves a list of system positions
      parameters:
        - name: "name"
          in: "query"
          description: "Name of the position"
          schema:
            type: "string"
        - name: "symbol"
          in: "query"
          description: "Symbol of the position"
          schema:
            type: "string"
        - name: "overName"
          in: "query"
          description: "Name of the overriding position"
          schema:
            type: "string"
        - name: "overSymbol"
          in: "query"
          description: "Symbol of the overriding position"
          schema:
            type: "string"
        - name: "orgName"
          in: "query"
          description: "Name of the organizational unit"
          schema:
            type: "string"
        - name: "orgSymbol"
          in: "query"
          description: "Symbol of the organizational unit"
          schema:
            type: "string"
        - name: "role"
          in: "query"
          description: "Id of the role"
          schema:
            type: "string"
        - name: "userName"
          in: "query"
          description: "Login of the user"
          schema:
            type: "string"
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          schema:
            type: "number"
            format: "int32"
            default: 0
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
            default: 20
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "name"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
    post:
      security:
        - basicAuth: []    
      tags:
        - positions
      summary: (Admin) Adding new position
      description: Adds new position to the system
      requestBody:
        description: |
          The executed query saves new position. The query is a JSON object with the following fields
          - **positionName** - name of the position
          - **positionSymbol** - symbol of the position
          - **higherPositionId** - id of the higher position
          - **organizationalUnitId** - id of the organizational unit
          - **rolesId** - ids of the roles
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addPositionDto'
      responses:
        '200':
          description: OK
  /api/positions/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - positions
      summary: (Admin) Exporting a list of positions
      description: Exports a list of system positions
      parameters:
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - name: "name"
          in: "query"
          description: "Name of the position"
          schema:
            type: "string"
        - name: "symbol"
          in: "query"
          description: "Symbol of the position"
          schema:
            type: "string"
        - name: "overName"
          in: "query"
          description: "Name of the overriding position"
          schema:
            type: "string"
        - name: "overSymbol"
          in: "query"
          description: "Symbol of the overriding position"
          schema:
            type: "string"
        - name: "orgName"
          in: "query"
          description: "Name of the organizational unit"
          schema:
            type: "string"
        - name: "orgSymbol"
          in: "query"
          description: "Symbol of the organizational unit"
          schema:
            type: "string"
        - name: "role"
          in: "query"
          description: "Id of the role"
          schema:
            type: "string"
        - name: "userName"
          in: "query"
          description: "Login of the user"
          schema:
            type: "string"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "name"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/positions/{id}:
    patch:
      security:
        - basicAuth: []    
      tags:
        - positions
      summary: (Admin) Editing position
      description: Edits position with given id
      parameters:
        - name: "id"
          in: "path"
          description: "Id of the position"
          required: true
          schema:
            type: integer
      requestBody:
        description: |
          The executed query edits position. The query is a JSON object with the following fields
          - **positionName** - name of the position
          - **positionSymbol** - symbol of the position
          - **higherPositionId** - id of the higher position
          - **organizationalUnitId** - id of the organizational unit
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editPositionDto'
      responses:
        '200':
          description: OK
    delete:
      security:
        - basicAuth: []    
      tags:
        - positions
      summary: (Admin) Deleting position
      description: Deletes position with given id
      parameters:
        - name: "id"
          in: "path"
          description: "Id of the position"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  /api/positions/assign:
    post:
      security:
        - basicAuth: []    
      tags:
        - positions
      summary: (Admin) Assigning position
      description: Assigns position to the user
      parameters:
        - name: "userId"
          in: "query"
          description: Id of the user
          schema:
            type: "string"
        - name: "positionId"
          in: "query"
          description: Id of the position
          schema:
            type: "number"
            format: "int32"
      responses:
        '200':
          description: OK
  /api/positions/detach:
    post:
      security:
        - basicAuth: []    
      tags:
        - positions
      summary: (Admin) Detaching position
      description: Detaches position from the user
      parameters:
        - name: "positionId"
          in: "query"
          description: Id of the position
          schema:
            type: "number"
            format: "int32"
      responses:
        '200':
          description: OK
  /api/organizationalUnits:
    get:
      security:
          - basicAuth: [] 
      tags:
        - organizational units
      summary: (Admin) Downloading a list of organizational units
      description: Retrieves a list of system ogranizational units
      parameters:
        - name: "name"
          in: "query"
          description: "Name of the organizational unit"
          schema:
            type: "string"
        - name: "symbol"
          in: "query"
          description: "Symbol of the organizational unit"
          schema:
            type: "string"
        - name: "highOuName"
          in: "query"
          description: "Name of the overriding unit"
          schema:
            type: "string"
        - name: "highOuSymbol"
          in: "query"
          description: "Symbol of the overriding unit"
          schema:
            type: "string"
        - name: "directorName"
          in: "query"
          description: "Name of the managerial position"
          schema:
            type: "string"
        - name: "directorSymbol"
          in: "query"
          description: "Symbol of the managerial position"
          schema:
            type: "string"
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          schema:
            type: "number"
            format: "int32"
            default: 0
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
            default: 20
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "name"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
    post:
      security:
        - basicAuth: []    
      tags:
        - organizational units
      summary: (Admin) Adding new organizational unit
      description: Adds new organizational unit to the system
      requestBody:
        description: |
          The executed query saves new organizational unit. The query is a JSON object with the following fields
          - **organizationalUnitName** - name of the organizational unit
          - **organizationalUnitSymbol** - symbol of the organizational unit
          - **directorPositionId** - id of the higher position
          - **higherOrganizationalUnitId** - id of the organizational unit
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/upsertOrganizationalUnitDto'
      responses:
        '200':
          description: OK
  /api/organizationalUnits/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - organizational units
      summary: (Admin) Exporting a list of organizational units
      description: Exports a list of system organizational units
      parameters:
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - name: "name"
          in: "query"
          description: "Name of the organizational unit"
          schema:
            type: "string"
        - name: "symbol"
          in: "query"
          description: "Symbol of the organizational unit"
          schema:
            type: "string"
        - name: "highOuName"
          in: "query"
          description: "Name of the overriding unit"
          schema:
            type: "string"
        - name: "highOuSymbol"
          in: "query"
          description: "Symbol of the overriding unit"
          schema:
            type: "string"
        - name: "directorName"
          in: "query"
          description: "Name of the managerial position"
          schema:
            type: "string"
        - name: "directorSymbol"
          in: "query"
          description: "Symbol of the managerial position"
          schema:
            type: "string"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "name"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/organizationalUnits/{id}:
    patch:
      security:
        - basicAuth: []    
      tags:
        - organizational units
      summary: (Admin) Editing organizational unit
      description: Edits organizational unit with given id
      parameters:
        - name: "id"
          in: "path"
          description: "Id of the organizational unit"
          required: true
          schema:
            type: integer
      requestBody:
        description: |
          The executed query edits organizational unit. The query is a JSON object with the following fields
          - **organizationalUnitName** - name of the organizational unit
          - **organizationalUnitSymbol** - symbol of the organizational unit
          - **directorPositionId** - id of the higher position
          - **higherOrganizationalUnitId** - id of the organizational unit
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/upsertOrganizationalUnitDto'
      responses:
        '200':
          description: OK
    delete:
      security:
        - basicAuth: []    
      tags:
        - organizational units
      summary: (Admin) Deleting organizational unit
      description: Deletes organizational unit with given id
      parameters:
        - name: "id"
          in: "path"
          description: "Id of the organizational unit"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  /api/calendar/shares:
    get:
      security:
          - basicAuth: [] 
      tags:
        - calendar shares
      summary: Downloading a list of user calendar shares
      description: Retrieves a list of logged-in user calendar shares
      parameters:
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          schema:
            type: "number"
            format: "int32"
            default: 0
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
            default: 20
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "isGroup"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
    post:
      security:
        - basicAuth: []    
      tags:
        - calendar shares
      summary: Adding new calendar share
      description: Adds new calendar share for logged-in user
      requestBody:
        description: |
          The executed query saves new calendar share. The query is a JSON object with the following fields
          - **shareResourceId** - name of the resource
          - **isGroup** - is resource a group
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/calendarShareDto'
      responses:
        '200':
          description: OK
  /api/calendar/shares/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - calendar shares
      summary: Exporting a list of user calendar shares
      description: Exports a list of logged-in user calendar shares
      parameters:
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "isGroup"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/calendar/shares/{id}:
    delete:
      security:
        - basicAuth: []    
      tags:
        - calendar shares
      summary: Deleting user calendar share
      description: Deletes user calendar share with given id
      parameters:
        - name: "id"
          in: "path"
          description: "Id of the calendar share"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  /api/substitutions:
    get:
      security:
          - basicAuth: [] 
      tags:
        - substitutions
      summary: Downloading a list of system substitutions
      description: Retrieves a list of substitutions for logged-in user
      parameters:
        - name: "processDefId"
          in: "query"
          description: "Name of the process definition"
          schema:
            type: "string"
        - name: "roleId"
          in: "query"
          description: "Id of the role in that process"
          schema:
            type: "string"
        - name: "substitutedUsername"
          in: "query"
          description: "Name of the substituted user"
          schema:
            type: "string"
        - name: "substituteUsername"
          in: "query"
          description: "Name of the substitute"
          schema:
            type: "string"
        - name: "startDate"
          in: "query"
          description: "Start date"
          schema:
            type: "string"
        - name: "finishDate"
          in: "query"
          description: "Finish date"
          schema:
            type: "string"
        - name: "onlyActive"
          in: "query"
          description: "Only active substitutions"
          schema:
            type: boolean
            default: false
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "lStartDate"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "DESC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
    post:
      security:
        - basicAuth: []    
      tags:
        - substitutions
      summary: Adding a new substitution
      description: Adds a new substitution
      requestBody:
        description: |
          The executed query saves new calendar share. The query is a JSON object with the following fields
          - **processDefId** - Name of the process definition
          - **roleId** - Id of the role in that process
          - **substitutedUsername** - Name of the substituted user
          - **substituteUsername** - Name of the substitute
          - **startDate** - Start date
          - **finishDate** - Finish date
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/substitutionDto'
      responses:
        '200':
          description: OK
  /api/substitutions/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - substitutions
      summary: Exporting a list of system substitutions
      description: Exports a list of substitutions for logged-in user
      parameters:
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - name: "processDefId"
          in: "query"
          description: "Name of the process definition"
          schema:
            type: "string"
        - name: "roleId"
          in: "query"
          description: "Id of the role in that process"
          schema:
            type: "string"
        - name: "substitutedUsername"
          in: "query"
          description: "Name of the substituted user"
          schema:
            type: "string"
        - name: "substituteUsername"
          in: "query"
          description: "Name of the substitute"
          schema:
            type: "string"
        - name: "startDate"
          in: "query"
          description: "Start date"
          schema:
            type: "string"
        - name: "finishDate"
          in: "query"
          description: "Finish date"
          schema:
            type: "string"
        - name: "onlyActive"
          in: "query"
          description: "Only active substitutions"
          schema:
            type: boolean
            default: false
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "lStartDate"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "DESC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/substitutions/{id}:
    delete:
      security:
        - basicAuth: []    
      tags:
        - substitutions
      summary: Deleting substitution
      description: Deletes substitution with given id
      parameters:
        - name: "id"
          in: "path"
          description: "Id of the substitution"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  /api/documents/cipherAlgorithms:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      summary: Downloading available cipher algorithms
      description: Retrieves a list of available cipher alhorithms for document class
      responses:
        '200':
          description: OK
  /api/documents/expirationTypes:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      summary: Downloading available expiration types
      description: Retrieves a list of available expiration types for document class
      responses:
        '200':
          description: OK
  /api/documents/classes/all:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      summary: Downloading document classes
      description: Retrieves a list of available document classes for logged-in user
      parameters:
        - name: "withAddingRight"
          in: "query"
          description: "Class with adding rights"
          schema:
            type: "string"
            default: "false"
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          schema:
            type: "number"
            format: "int32"
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "orderId"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/documents/classes/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "orderId"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      summary: Exporting document classes
      description: Export document classes for logged-in user
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/associations:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      summary: (Admin) Downloading document class associations
      description: Retrieves a list of document class associations
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          required: true
          schema:
            type: "number"
            format: "int32"
            default: 0
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          required: true
          schema:
            type: "number"
            format: "int32"
            default: 20
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/associations/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
      summary: (Admin) Exporting document class associations
      description: Exports document class associations
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/associations/{associationId}:
    delete:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "associationId"
          in: "path"
          required: true
          description: "Association id"
          schema:
            type: "string"
      summary: (Admin) Deleting document class association
      description: Deletes document class association with given id
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/associations/{documentClassAssociationId}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "documentClassAssociationId"
          in: "path"
          required: true
          description: "Association id"
          schema:
            type: "string"
      summary: (Admin) Downloading document class association
      description: Retrieves document class association with given id
      responses:
        '200':
          description: OK
  /api/documents/classes/associations:
    post:
      security:
        - basicAuth: []    
      tags:
        - document classes   
      summary: (Admin) Adding document class association
      description: Adds new document class association
      requestBody:
        description: |
          The executed query saves document association. The query is a JSON object with the following fields 
            - **id** - id of the association  
            - **parentClassId** - parent class id (required) 
            - **childClassId** - child class id 
            - **separator** - separator 
            - **associateOnEmptyValues** - join on empty values 
            - **associatedIndexes** - list of indexes to associate 
              - parentIndexId - parent index identifier 
              - childIndexId - child index identifier  
            - **displayedIndexes** - list of indexes to display
              - indexId - id of the displayed index
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/upsertDocumentClassAssociationDto'
      responses:
        '200':
          description: "OK"
  /api/documents/classes/associations/{associationId}:
    put:
      security:
        - basicAuth: []    
      tags:
        - document classes   
      parameters:
        - name: "associationId"
          in: "path"
          required: true
          description: "Association id"
          schema:
            type: "string"
      summary: (Admin) Changing document class association
      description: Changes document class association with given id
      requestBody:
        description: |
          The executed query updates document association. The query is a JSON object:
            - **id** - id of the association  
            - **parentClassId** - parent class id (required) 
            - **childClassId** - child class id 
            - **separator** - separator 
            - **associateOnEmptyValues** - join on empty values 
            - **associatedIndexes** - list of indexes to associate 
              - parentIndexId - parent index identifier 
              - childIndexId - child index identifier  
            - **displayedIndexes** - list of indexes to display
                - indexId - id of the displayed index
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/upsertDocumentClassAssociationDto'
      responses:
        '200':
          description: "OK"
  /api/documents/classes/{documentClassId}/actions:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "id"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "DESC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      summary: (Admin) Downloading document class actions
      description: Retrieves a list of document class actions
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/actions/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "extension"
          in: "path"
          required: true
          description: "Extension"
          schema:
            $ref: '#/components/schemas/extension'
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "id"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      summary: (Admin) Downloading document class actions
      description: Exports a list of document class actions
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/actions/scripts:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "document class id"
          schema:
            type: "string"
      summary: (Admin) Downloading document class actions scripts
      description: Retrieves a list of available document class actions scripts
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/actions/sources:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
      summary: (Admin) Downloading document class actions sources
      description: Retrieves a list of available document class actions sources
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/actions/{docClassActionId}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "docClassActionId"
          in: "path"
          required: true
          description: "Document class action id"
          schema:
            type: "string"
      summary: (Admin) Downloading document class action
      description: Retrieves a document class action
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/actions/{documentClassActionId}:
    delete:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "documentClassActionId"
          in: "path"
          required: true
          description: "Document class action id"
          schema:
            type: "string"
      summary: (Admin) Deleting document class action
      description: Deletes document class action with given id
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/indices/types:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
      summary: (Admin) Downloading document class indices types
      description: Retrieves a list of available document class indices types
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/indexes:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
      summary: (Admin) Downloading document class indices
      description: Retrieves a list of document class indices
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/indexes/add:
    post:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
      summary: (Admin) Adding document class index
      description: |
          The query contains a JSON object containing index parameters. The definition should include the following field 
          - **name** - name of the index
          - **descripton** - description of the index
          - **type** - type of the index
          - **indexPatterns** - list of objects described below (for type 'String')
            - pattern - pattern of replacement
            - replace - value of replacement
            - isRegex - is pattern regular expression
      requestBody:
        description:
          The query contains a JSON object containing logging parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateDocumentClassIndexDto'  
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/indexes/update:
    post:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
      summary: (Admin) Updating document class index
      description: Updates document class indiex with given id
      requestBody:
        description: |
          The query contains a JSON object containing index parameters. The definition should include the following field 
          - **name** - name of the index
          - **descripton** - description of the index
          - **type** - type of the index
          - **indexPatterns** - list of objects described below (for type 'String')
            - pattern - pattern of replacement
            - replace - value of replacement
            - isRegex - is pattern regular expression
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateDocumentClassIndexDto'  
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/indexes/{documentClassIndexId}:
    delete:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "documentClassIndexId"
          in: "path"
          required: true
          description: "Document class index id"
          schema:
            type: "string"
      summary: (Admin) Deleting document class index
      description: Deletes document class index
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/indexes/{documentClassIndexId}/moveUp:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "documentClassIndexId"
          in: "path"
          required: true
          description: "Document class index id"
          schema:
            type: "string"
      summary: (Admin) Moving up document class index
      description: Moves up document class index
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/indices/{documentClassIndexId}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "documentClassIndexId"
          in: "path"
          required: true
          description: "Document class index id"
          schema:
            type: "string"
      summary: (Partial rights to document class) Downloading document class index
      description: Retrieves document class index with specified id
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/protection:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Focument class id"
          schema:
            type: "string"
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          schema:
            type: "number"
            format: "int32"
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "group"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "DESC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      summary: (Admin) Downloading document class protections
      description: Retrieves document class protections
      responses:
        '200':
          description: OK
    post:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
      summary: (Admin) Adding document class protection
      description: Adds document class protection 
      requestBody:
        description: |
          The query contains a JSON object containing protection parameters. The definition should include the following field:
          - **resourceName** - name of the resource (name of the user/gr)
          - **group** - is resource a group
          - **canAddDocumentInArchive** - can add document in archive
          - **canAddDocumentInProcess** - can add document in process
          - **canPrint** - can print documents
          - **canShowAllDocuments** - preview from activity 
          - **rightLevel** - level of right (read, modify, delete)
          - **documentDetachType** - document detach type (default, always, added_here)
          - **conditions** - list of objects described below
            - resourceName - name of the resource
            - group - is resource a group
            - type - type of the condition
            - documentClassIndexId - index id
            - operator - operator (OR, AND)
            - negation - should negate
            - value - value of the condition
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/upsertDocumentClassRightDto'  
      responses:
        '200':
          description: OK
    patch:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
      summary: (Admin) Updating document class protection
      description: Updates document class protection
      requestBody:
        description: |
          The query contains a JSON object containing protection parameters. The definition should include the following field:
          - **resourceName** - name of the resource (name of the user/gr)
          - **group** - is resource a group
          - **canAddDocumentInArchive** - can add document in archive
          - **canAddDocumentInProcess** - can add document in process
          - **canPrint** - can print documents
          - **canShowAllDocuments** - preview from activity 
          - **rightLevel** - level of right (read, modify, delete)
          - **documentDetachType** - document detach type (default, always, added_here)
          - **conditions** - list of objects described below
            - resourceName - name of the resource
            - group - is resource a group
            - type - type of the condition
            - documentClassIndexId - index id
            - operator - operator (OR, AND)
            - negation - should negate
            - value - value of the condition
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/upsertDocumentClassRightDto'  
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/protection/conditionTypes:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
      summary: (Admin) Downloading document class protection condition types
      description: Retrieves a list of document class protection condition types
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/protection/conditions:
    post:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "document class id"
          schema:
            type: "string"
      summary: (Admin) Updating document class protection condition
      description: Updates document class protection with given id
      requestBody:
        description: |
          The query contains a JSON object containing protection parameters. The definition should include the following fields: 
          - **resourceName** - name of the resource
          - **group** - is resource a group
          - **type** - type of the condition 
            <details open> Typy:"COMPAREVALUES, USERPROCESS, USEROUPROCESS, USERSUBOUPROCESS, USEROUS, USERSUBOUS, USEROUSYMBOLS,USERSUBOUSYMBOLS" </details>
          - **documentClassIndexId** - index id
          - **operator** - operator (OR, AND)
          - **negation** - should negate
          - **value** - value of the condition
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentRightConditionDto'  
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/protection/conditions/{conditionId}:
    delete:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "conditionId"
          in: "path"
          required: true
          description: "Document class index id"
          schema:
            type: "string"
      summary: (Admin) Deleting document class protection condtition
      description: Deletes document class protection condition with given id
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/protection/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "extension"
          in: "path"
          required: true
          description: "Extension"
          schema:
            $ref: '#/components/schemas/extension'
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "group"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "DESC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      summary: (Admin) Downloading document class protections
      description: Exports a list of document class actions
      responses:
        '200':
          description: OK
  /api/documents/classes/{documentClassId}/protection/forResource:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "resourceId"
          in: "query"
          required: true
          description: "User/group name"
          schema:
            type: "string"
        - name: "isGroup"
          in: "query"
          required: true
          description: "Is resource group"
          schema:
            type: boolean
      summary: (Admin) Downloading document class protection
      description: Retrieves document class protections for specified resource
      responses:
        '200':
          description: OK
    delete:
      security:
          - basicAuth: [] 
      tags:
        - document classes
      parameters:
        - name: "documentClassId"
          in: "path"
          required: true
          description: "Document class id"
          schema:
            type: "string"
        - name: "resourceId"
          in: "query"
          required: true
          description: "User/group name"
          schema:
            type: "string"
        - name: "isGroup"
          in: "query"
          required: true
          description: "Is resource group"
          schema:
            type: boolean
      summary: (Admin) Deletes document class protection
      description: Deletes document class protections for specified resource
      responses:
        '200':
          description: OK
  /api/links:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      summary: Downloading document sets
      description: Retrieves a list of available document sets for logged-in user
      parameters:
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          schema:
            type: "number"
            format: "int32"
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "id"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/links/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      summary: Exporting document sets
      description: Exports a list of available document sets for logged-in user
      parameters:
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "id"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/links/{id}:
    patch:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      summary: (Admin) Updating document set
      description: Updates document set with given id
      parameters:
        - name: "id"
          in: "path"
          description: "Link id"
          required: true
          schema:
            type: integer
      requestBody:
        description: |
          The query contains a JSON object containing document set parameters. The definition should include the following fields
          - **name** - name of the document set
          - **description** - description of the set
          - **iconName** - icon 
          - **iconColor** - color of the icon
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/linkDto' 
      responses:
        '200':
          description: OK
    delete:
      security:
        - basicAuth: []    
      tags:
        - document sets
      summary: (Admin) Deleting document set
      description: Deletes document set with given id
      parameters:
        - in: path
          name: "id"
          description: Id of the document set
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "OK"
        '403':
          description: "Forbidden"
  /api/links/{id}/associations:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      summary: (Admin) Downloading document set associations
      description: Retrieves a list of document set associations
      parameters:
        - name: "id"
          in: "path"
          description: "Link id"
          required: true
          schema:
            type: integer
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          schema:
            type: "number"
            format: "int32"
            default: 0
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
            default: 20
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "documentClassTranslatedName"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/links/{id}/associations/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      summary: (Admin) Downloading document set associations
      description: Exports a list of document set associations
      parameters:
        - name: "id"
          in: "path"
          description: "Link id"
          required: true
          schema:
            type: integer
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "documentClassTranslatedName"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/links/{id}/associations/{documentClassId}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      summary: (Admin) Downloading document set association
      description: Retrieves document set association
      parameters:
        - name: "id"
          in: "path"
          description: "Link id"
          required: true
          schema:
            type: integer
        - in: path
          name: documentClassId
          description: Id of the document class
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
    delete:
      security:
        - basicAuth: []    
      tags:
        - document sets
      summary: (Admin) Deleting document set association
      description: Deletes document set association with given document class
      parameters:
        - in: path
          name: "id"
          description: Id of the document set
          required: true
          schema:
            type: integer
        - in: path
          name: documentClassId
          description: Id of the document class
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "OK"
        '403':
          description: "Forbidden"
    post:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      parameters:
        - in: path
          name: "id"
          description: Id of the document set
          required: true
          schema:
            type: integer
        - in: path
          name: documentClassId
          description: Id of the document class
          required: true
          schema:
            type: integer
      summary: (Admin) Adding document set association
      description: Adds document set association
      requestBody:
        description: |
          The query contains a JSON object containing association parameters. The definition should include the following fields 
          - **linkIndexId** - id of the document set index
          - **documentClassIndexId** - id of the document class index
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/upsertLinkConnectionDto'  
      responses:
        '200':
          description: OK
    put:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      parameters:
        - in: path
          name: "id"
          description: Id of the document set
          required: true
          schema:
            type: integer
        - in: path
          name: documentClassId
          description: Id of the document class
          required: true
          schema:
            type: integer
      summary: (Admin) Editing document set association
      description: Edits document set association
      requestBody:
        description: |
          The query contains a JSON object containing association parameters. The definition should include the following fields 
          - **linkIndexId** - id of the document set index
          - **documentClassIndexId** - id of the document class index
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/upsertLinkConnectionDto'  
      responses:
        '200':
          description: OK    
  /api/links/{id}/index:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      summary: (Admin) Downloading document set indices
      description: Retrieves a list of document set indices
      parameters:
        - name: "id"
          in: "path"
          description: "Link id"
          required: true
          schema:
            type: integer
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          schema:
            type: "number"
            format: "int32"
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "indexOrder"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
    post:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      parameters:
        - in: path
          name: "id"
          description: Id of the document set
          required: true
          schema:
            type: integer
      summary: (Admin) Adding document set index
      description: Adds document set index
      requestBody:
        description: |
          The query contains a JSON object containing index parameters. The definition should include the following field 
          - **indexName** - name of the index
          - **indexDescription** - description of the index
          - **indexType** - type of the index (integer, float, string, date, list, dateTime, boolean)
          - **indexValues** - values of the index
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/linkIndexDto'  
      responses:
        '200':
          description: OK
          
  /api/links/{id}/index/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      summary: (Admin) Downloading document set indices
      description: Exports a list of document set indices
      parameters:
        - name: "id"
          in: "path"
          description: "Link id"
          required: true
          schema:
            type: integer
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "indexOrder"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/links/{id}/index/{indexId}:
    patch:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      parameters:
        - in: path
          name: "id"
          description: Id of the document set
          required: true
          schema:
            type: integer
        - in: path
          name: "indexId"
          description: Id of the document set index
          required: true
          schema:
            type: integer
      summary: (Admin) Editing document set index
      description: Edits document set index
      requestBody:
        description: |
          The query contains a JSON object containing index parameters. The definition should include the following fields 
          - **indexName** - name of the index
          - **indexDescription** - description of the index
          - **indexType** - type of the index (integer, float, string, date, list, dateTime, boolean)
          - **indexValues** - values of the index
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/linkIndexDto'  
      responses:
        '200':
          description: OK
  /api/links/{id}/protections:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      summary: (Admin) Downloading document set protections
      description: Retrieves a list of document set protections
      parameters:
        - name: "id"
          in: "path"
          description: "Link id"
          required: true
          schema:
            type: integer
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          required: true
          schema:
            type: "number"
            format: "int32"
        - name: "limit"
          in: "query"
          required: true
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "userName"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
    post:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      parameters:
        - in: path
          name: "id"
          description: Id of the document set
          required: true
          schema:
            type: integer
      summary: (Admin) Adding document set index
      description: Adds document set index
      requestBody:
        description: |
          The query contains a JSON object containing index parameters. The definition should include the following field 
          - **userName** - name of the resource
          - **isGroup** - is resource a group
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/linkProtection'  
      responses:
        '200':
          description: OK
    delete:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      parameters:
        - in: path
          name: "id"
          description: Id of the document set
          required: true
          schema:
            type: integer
        - in: query
          name: "username"
          description: Name of the resource
          required: true
          schema:
            type: string
        - in: query
          name: "isGroup"
          description: Is resource a group
          required: true
          schema:
            type: boolean
      summary: (Admin) Deleting document set protection
      description: Deletes document set protection
      responses:
        '200':
          description: OK
  /api/links/{id}/protections/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - document sets
      summary: (Admin) Downloading document set protections
      description: Exports a list of document set protections
      parameters:
        - name: "id"
          in: "path"
          description: "Link id"
          required: true
          schema:
            type: integer
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "userName"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/oauth/clients:
    get:
      security:
          - basicAuth: [] 
      tags:
        - oauth
      summary: (Admin) Downloading oAuth clients
      description: Retrieves a list of oAuth clients
      responses:
        '200':
          description: OK
    post:
      security:
        - basicAuth: []
      tags:
        - oauth
      summary: (Admin) Adding new oAuth client
      description: Adds new oAuth client
      requestBody:
        description: |
            The query contains a JSON object containing definition of oauth client to add. The definition should include the following fields
            - **name** - name
            - **authenticationMethod** - authentication method ('AUTHORIZATION_CODE', 'CLIENT_CREDENTIALS')
            - **clientId** - client id
            - **clientSecret** - client secret
            - **scope** - scope
            - **authorizationUrl** - authorization url
            - **authorizationUrl** - token url
            - **redirectUrl** - redirect url
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oAuthClientDto' 
      responses:
        '200':
          description: Ok
    patch:
      security:
        - basicAuth: []
      tags:
        - oauth
      summary: (Admin) Adding new oAuth client
      description: Adds new oAuth client
      requestBody:
        description: |
            The query contains a JSON object containing definition of oauth client to add. The definition should include the following fields
            - **name** - name
            - **authenticationMethod** - authentication method ('AUTHORIZATION_CODE', 'CLIENT_CREDENTIALS')
            - **clientId** - client id
            - **clientSecret** - client secret
            - **scope** - scope 
            - **authorizationUrl** - authorization url
            - **authorizationUrl** - token url
            - **redirectUrl** - redirect url
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oAuthClientDto' 
      responses:
        '200':
          description: Ok
  /api/oauth/clients/{id}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - oauth
      summary: (Admin) Downloading oAuth client
      description: Retrieves oAuth client with given id
      parameters:
        - name: "id"
          in: "path"
          description: oAuth client id
          required: true
          schema:
            type: "number"
            format: "int64"
      responses:
        '200':
          description: OK
    delete:
      security:
          - basicAuth: [] 
      tags:
        - oauth
      summary: (Admin) Deleting oAuth client
      description: Deletes oAuth client with given id
      parameters:
        - name: "id"
          in: "path"
          description: oAuth client id
          required: true
          schema:
            type: "number"
            format: "int64"
      responses:
        '200':
          description: OK
          
  /api/i18n/types/system/export/json:
    post:
      security:
        - basicAuth: []
      tags:
        - translations
      summary: From version 4.1.9. Exporting system translations to JSON.
      operationId: "exportSystemTranslationsJson"
      requestBody:
        description: |
            The body contains a JSON array containing translations to export.
            - **source** - system element to translate (plusworkflow, plugin id)
            - **scope** - translation type: SERVER/BROWSER
            - **key** - translation key
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/systemTranslationDtoArray' 
      responses:
        '200':
          description: Exported translations (JSON array)
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    source: 
                      type: string
                    scope:
                      type: string
                      enum: [SERVER, BROWSER]
                    key:
                      type: string
                    value_<language_code>:
                      type: string
                      description: There can be multiple values, for each supported language in PlusWorkflow
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [false]
                  message:
                    type: string
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [false]
                  message:
                    type: string
  /api/i18n/types/config_element/export/json:
    post:
      security:
        - basicAuth: []
      tags:
        - translations
      summary: From version 4.1.9. Exporting configuration elements translations to JSON.
      operationId: "exportConfigElementTranslationsJson"
      requestBody:
        description: |
            The body contains a JSON array containing translations to export.
            - **source** - system element to translate (for example: DOCUMENT_CLASS)
            - **translatedEntityId** - identifier of the translated element
            - **translatedEntityName** - name of the translated element
            - **translatedFieldType** - type of the translated field
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configElementTranslationDtoArray' 
      responses:
        '200':
          description: Exported translations (JSON array)
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    source: 
                      type: string
                    key:
                      type: string
                    translatedFieldType:
                      type: string
                      enum: [NAME, DESCRIPTION, SUBJECT, ABBREVIATION]
                    value_<language_code>:
                      type: string
                      description: There can be multiple values, for each supported language in PlusWorkflow
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [false]
                  message:
                    type: string
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [false]
                  message:
                    type: string
  /api/i18n/types/custom/export/json:
    post:
      security:
        - basicAuth: []
      tags:
        - translations
      summary: From version 4.1.9. Exporting custom translations to JSON.
      operationId: "exportCustomTranslationsJson"
      requestBody:
        description: |
            The body contains a JSON array containing translations to export.
            - **key** - the key of the custom translation for which you want to retrieve the translated values
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customTranslationDtoArray' 
      responses:
        '200':
          description: Exported translations (JSON array)
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    source: 
                      type: string
                    key:
                      type: string
                    value_<language_code>:
                      type: string
                      description: There can be multiple values, for each supported language in PlusWorkflow
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restResult'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restResult'
  /api/email/config:
    get:
      security:
          - basicAuth: [] 
      tags:
        - email config
      summary: (Admin) Downloading a list of email configurations
      description: Retrieves a list of available email configurations
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
    post:
      security:
        - basicAuth: []    
      tags:
        - email config
      summary: (Admin) Adding email configuration
      description: Adds new email configuration
      requestBody:
        description: |
          The executed query saves new email configuration. The query is a JSON object with the following fields: 
            - **id** - Id of the configuration
            - **name** - Name of the configuration
            - **email** - Email address displayed as a sender
            - **defaultConfiguration** - Specify whether this is the default configuration
            - **mailServer** - Server name displayed in the email sender's address
            - **smtpMailServer** - Address of the SMTP server responsible for sending messages
            - **smtpPortNumber** - Port number of the SMTP server
            - **sourceAddress** - Alias of the box sending notifications
            - **timeout** - Maximum waiting time for connection to a server (in milliseconds)
            - **mailUser** - User name displayed in the email sender's address
            - **useSSL** - This parameter defines if a safe SSL/TLS connection is to be used
            - **userStartTLS** - This parameter defines if a StartTls is to be used
            - **smtpUser** - Name of the SMTP server user responsible for sending messages
            - **userPassword** - Password of the SMTP server user responsible for sending messages
            - **debug** - Logging details of messages sent. Messages are logged in the ‚Äúcom.plusmpm.email.MailClient‚Äù logger
            - **emailAuthenticationMethod** - Authentication method; PASSWORD/OAUTH
            - **oauth2Connection** - list of indexes to display
            - **bufferSender** - buffered send
            - **if bufferSender = true**
            - **maxAttempts** - Number of message sending attempts in case the first attempt fails
            - **period** - Frequency with which the system checks if there are any messages to send (in milliseconds)
            - **tryAfter** - Minimum time after which message sending is retried (in milliseconds)
            - **sendCopy** - send copies to given addresses
            - **if sendCopy = true**
            - **sendCopyRecipients** - addresses(seperated by semicolon)
            - **sendCopyRecipientsType** - type of copy (TO, COPY, BLIND_COPY)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailConfigurationDto'
      responses:
        '200':
          description: "OK"
    patch:
      security:
        - basicAuth: []    
      tags:
        - email config
      summary: (Admin) Editing email configuration
      description: Edits email configuration
      requestBody:
        description: |
          The executed query saves new email configuration. The query is a JSON object with the following fields: 
            - **id** - Id of the configuration
            - **name** - Name of the configuration
            - **email** - Email address displayed as a sender
            - **defaultConfiguration** - Specify whether this is the default configuration
            - **mailServer** - Server name displayed in the email sender's address
            - **smtpMailServer** - Address of the SMTP server responsible for sending messages
            - **smtpPortNumber** - Port number of the SMTP server
            - **sourceAddress** - Alias of the box sending notifications
            - **timeout** - Maximum waiting time for connection to a server (in milliseconds)
            - **mailUser** - User name displayed in the email sender's address
            - **useSSL** - This parameter defines if a safe SSL/TLS connection is to be used
            - **userStartTLS** - This parameter defines if a StartTls is to be used
            - **smtpUser** - Name of the SMTP server user responsible for sending messages
            - **userPassword** - Password of the SMTP server user responsible for sending messages
            - **debug** - Logging details of messages sent. Messages are logged in the ‚Äúcom.plusmpm.email.MailClient‚Äù logger
            - **emailAuthenticationMethod** - Authentication method; PASSWORD/OAUTH
            - **oauth2Connection** - list of indexes to display
            - **bufferSender** - buffered send
            - **if bufferSender = true**
            - **maxAttempts** - Number of message sending attempts in case the first attempt fails
            - **period** - Frequency with which the system checks if there are any messages to send (in milliseconds)
            - **tryAfter** - Minimum time after which message sending is retried (in milliseconds)
            - **sendCopy** - send copies to given addresses
            - **if sendCopy = true**
            - **sendCopyRecipients** - addresses(seperated by semicolon)
            - **sendCopyRecipientsType** - type of copy (TO, COPY, BLIND_COPY)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailConfigurationDto'
      responses:
        '200':
          description: "OK"
  /api/email/config/{id}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - email config
      parameters:
        - name: "id"
          in: "path"
          description: Id of the email configuration
          required: true
          schema:
            type: integer
      summary: (Admin) Downloading an email configuration
      description: Retrieves a email configuration with given id
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
    delete:
      security:
          - basicAuth: [] 
      tags:
        - email config
      parameters:
        - name: "id"
          in: "path"
          description: Id of the email configuration
          required: true
          schema:
            type: integer
      summary: (Admin) Deleting email configuration
      description: Deletes an email configuration with given id
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/email/config/test:
    post:
      security:
          - basicAuth: [] 
      tags:
        - email config
      parameters:
        - name: "sendTo"
          in: query
          description: Send to (enter email address)
          required: true
          schema:
            type: string
        - name: "subject"
          in: query
          description: Subject of the email message
          required: true
          schema:
            type: string
        - name: "content"
          in: query
          description: Content of the email message
          required: true
          schema:
            type: string
      requestBody:
        description: |
          The executed query saves new email configuration. The query is a JSON object with the following fields 
            - **parentClassId** - parent class id (required) 
            - **childClassId** - child class id 
            - **separator** - separator 
            - **associateOnEmptyValues** - join on empty values
            - **associatedIndexes** - list of indexes to associate 
            - **displayedIndexes** - list of indexes to display
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailConfigurationDto'
      summary: (Admin) Testing an email configuration
      description: Test an email configuration
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
    
  /api/mappings:
    get:
      security:
          - basicAuth: [] 
      tags:
        - mappings
      summary: (Admin) Downloading a list of system mappings
      description: Retrieves a list of system system mappings
      parameters:
        - name: "userName"
          in: "query"
          description: "User login"
          schema:
            type: "string"
        - name: "firstName"
          in: "query"
          description: "First name of the user"
          schema:
            type: "string"
        - name: "lastName"
          in: "query"
          description: "Last name of the user"
          schema:
            type: "string"
        - name: "group"
          in: "query"
          description: "Group"
          schema:
            type: "string"
        - name: "positionName"
          in: "query"
          description: "Position"
          schema:
            type: "string"
        - name: "positionSymbol"
          in: "query"
          description: "Position symbol"
          schema:
            type: "string"
        - name: "organizationalUnitName"
          in: "query"
          description: "Organizational Unit"
          schema:
            type: "string"
        - name: "organizationalUnitSymbol"
          in: "query"
          description: "Symbol of the organizational unit"
          schema:
            type: "string"
        - name: "roleId"
          in: "query"
          description: "Role id"
          schema:
            type: "string"
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          schema:
            type: "number"
            format: "int32"
            default: 0
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
            default: 20
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "userName"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/mappings/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - mappings
      summary: (Admin) Exporting a list of system mappings
      description: Exports a list of system system mappings
      parameters:
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - name: "userName"
          in: "query"
          description: "User login"
          schema:
            type: "string"
        - name: "firstName"
          in: "query"
          description: "First name of the user"
          schema:
            type: "string"
        - name: "lastName"
          in: "query"
          description: "Last name of the user"
          schema:
            type: "string"
        - name: "group"
          in: "query"
          description: "Group"
          schema:
            type: "string"
        - name: "positionName"
          in: "query"
          description: "Position"
          schema:
            type: "string"
        - name: "positionSymbol"
          in: "query"
          description: "Position symbol"
          schema:
            type: "string"
        - name: "organizationalUnitName"
          in: "query"
          description: "Organizational Unit"
          schema:
            type: "string"
        - name: "organizationalUnitSymbol"
          in: "query"
          description: "Symbol of the organizational unit"
          schema:
            type: "string"
        - name: "roleId"
          in: "query"
          description: "Role id"
          schema:
            type: "string"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "userName"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/scheduledtasks/available:
    get:
      security:
          - basicAuth: [] 
      tags:
        - scheduled tasks
      summary: (Admin) Downloading a list of available scheduled tasks
      description: Retrieves a list of available scheduled tasks
      parameters:
        - name: "className"
          in: "query"
          description: Name of the scheduled task class
          schema:
            type: "string"
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/scheduledtasks/history/by/task:
    get:
      security:
          - basicAuth: [] 
      tags:
        - scheduled tasks
      summary: (Admin) Downloading history of scheduled task
      description: Retrieves a history of scheduled task
      parameters:
        - name: "taskId"
          in: "query"
          required: true
          description: Id of the scheduled task
          schema:
            type: "string"
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          schema:
            type: "number"
            format: "int32"
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/scheduledtasks:
    post:
      security:
        - basicAuth: []    
      tags:
        - scheduled tasks
      summary: (Admin) Saving new scheduled task
      description: Saves new scheduled task
      requestBody:
        description: |
          The executed query adds new scheduled task. The query is a JSON object with the following fields 
          - **name** - name of the new scheduled task
          - **description** - description
          - **method** - method
          - **className** -  class name of the scheduled task
          - **params** - list of parameter objects:
            - position - position of the parameter (starting from 0)
            - type - type of the parameter
            - value - object representing information about parameter value 
              - valueType - single/array
              - value - value of the parameter(with type single) or list of parameters (with type array) Example:
            `[{"position":0,"value":{"valueType":"single","value":"test"},"type":"java.lang.String"}]`
          - **categoryName** - category name
          - **categoryId** - category id
          - **firstRun** - date of the first run of the scheduled task
          - **executeOnce** - should be executed only once
          - **period** - object containing the period info; 
            - unit - MINUTES/HOURS/DAYS/MONTHS(30 days)
            - value - number
          - **active** - is task active
          - **saveHistory** - should save history of the task execution
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addScheduledTaskDto'
      responses:
        '200':
          description: OK
  /api/scheduledtasks/{id}/execute:
    post:
      security:
          - basicAuth: [] 
      tags:
        - scheduled tasks
      summary: Execute a scheduled task
      description:  This endpoint triggers immediate execution of a scheduled task identified by its ID.
      parameters:
        - name: "id"
          in: "path"
          description: Unique identifier of the scheduled task to execute
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden          
          
          
  /api/processes/definition/{processDefId}/protections:
    get:
      security:
          - basicAuth: [] 
      tags:
        - process definitions
      summary: (Admin) Downloading process definition protections
      description: Retrieves a list of process definicion protections
      parameters:
        - name: "processDefId"
          in: "path"
          required: true
          description: "Process definition id"
          schema:
            type: "string"
        - name: "start"
          required: true
          in: "query"
          description: "Result number from which results are to be returned"
          schema:
            type: "number"
            format: "int32"
        - name: "limit"
          required: true
          in: "query"
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "resourceId"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/processes/definition/{processDefId}/protections/export/{extension}:
    get:
      security:
          - basicAuth: [] 
      tags:
        - process definitions
      summary: (Admin) Exporting process definition protections
      description: Exports a list of process definition protections
      parameters:
        - name: "extension"
          in: "path"
          description: "Extension"
          required: true
          schema:
            $ref: '#/components/schemas/extension'
        - name: "processDefId"
          in: "path"
          required: true
          description: "Process definition id"
          schema:
            type: "string"
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "resourceId"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
  /api/processes/definition/{procDefId}/document/views:
    get:
      security:
          - basicAuth: [] 
      tags:
        - process definitions
      summary: (Admin) Downloading process definition document views
      description: Retrieves a list of process definicion document views
      parameters:
        - name: "procDefId"
          in: "path"
          required: true
          description: "Process definition id"
          schema:
            type: "string"
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          schema:
            type: "number"
            format: "int32"
            default: 0
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
            default: 20
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "documentViewName"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
    post:
      security:
          - basicAuth: [] 
      tags:
        - process definitions
      parameters:
        - name: "procDefId"
          in: "path"
          required: true
          description: "Process definition id"
          schema:
            type: "string"
      summary: (Admin) Adding process document view
      description: Adds document view
      requestBody:
        description: |
          The executed query saves document view for logged-in user. The query is a JSON object with the following fields 
            - **documentViewName** - view name (required) 
            - **documentViewDesc** - view description 
            - **procDefId** - process definition id of the process 
            - **taskDefId** - task definition id (requires process definition id) 
            - **docClassId** - document class id 
            - **descending** - show documents in descending order 
            - **amount** - amount of documents (required)
            - **regex** - regex 
            - **showOn** - display on form, history, all(SHOW_FORM, SHOW_HISTORY, SHOW_ALL)
            - **displayByOffice365** - determines whether to display the document using Office 365
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addUserDocumentView'
      responses:
        '200':
          description: OK
    delete:
      security:
          - basicAuth: [] 
      tags:
        - process definitions
      parameters:
        - name: "procDefId"
          in: "path"
          required: true
          description: "Process definition id"
          schema:
            type: "string"
        - in: query
          name: "id"
          description: Id of the document view
          required: true
          schema:
            type: integer
      summary: (Admin) Deleting process document view
      description: Deletes document view with given id
      responses:
        '200':
          description: OK
  /api/processes/definition/{procDefId}/document/views/{id}:
    patch:
      security:
          - basicAuth: [] 
      tags:
        - process definitions
      parameters:
        - in: path
          name: "id"
          description: Id of the document view
          required: true
          schema:
            type: integer
        - name: "procDefId"
          in: "path"
          required: true
          description: "Process definition id"
          schema:
            type: "string"
      summary: (Admin) Editing document view
      description: Edits document view
      requestBody:
        description: |
          The executed query edits document view for logged-in user. The query is a JSON object with the following fields 
            - **documentViewName** - view name (required) 
            - **documentViewDesc** - view description 
            - **procDefId** - process definition id of the process 
            - **taskDefId** - task definition id (requires process definition id) 
            - **docClassId** - document class id 
            - **descending** - show documents in descending order 
            - **amount** - amount of documents (required)
            - **regex** - regex 
            - **showOn** - display on form, history, all(SHOW_FORM, SHOW_HISTORY, SHOW_ALL)
            - **displayByOffice365** - determines whether to display the document using Office 365
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addUserDocumentView'
      responses:
        '200':
          description: OK
  /api/systemMessage:
    get:
      security:
          - basicAuth: [] 
      tags:
        - system messages
      summary: (Admin) Downloading list of system messages
      description: Retrieves a list of all system messages
      parameters:
        - name: "start"
          in: "query"
          description: "Result number from which results are to be returned"
          schema:
            type: "number"
            format: "int32"
            default: 0
        - name: "limit"
          in: "query"
          description: "Number of returned results"
          schema:
            type: "number"
            format: "int32"
            default: 20
        - name: "sortBy"
          in: "query"
          description: "Sort by"
          schema:
            type: "string"
            default: "id"
        - name: "sortDirection"
          in: "query"
          schema:
            type: string
            default: "ASC"
            enum:
              - ASC
              - DESC
          description: "Sort direction"
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
    post:
      security:
          - basicAuth: [] 
      tags:
        - system messages
      summary: (Admin) Adding new system message
      description: Adds new system message
      requestBody:
        description: |
          The executed query saves document view for logged-in user. The query is a JSON object with the following fields 
            - **message** - message (required) 
            - **startDate** - start date (example "2024-06-12T08:46:00")
            - **finishDate** - finish date
            - **groupId** - group if (null if for all users)
            - **enabled** - is active
            - **afterLogin** - show only after login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addSystemMessageDto'
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  /api/systemMessage/{id}:
    patch:
      security:
          - basicAuth: [] 
      tags:
        - system messages
      summary: (Admin) Editing system message
      description: Edits system message
      parameters:
        - name: "id"
          in: "path"
          description: "id of the system message"
          required: true
          schema:
            type: integer
      requestBody:
        description: |
          The executed query changes document view for logged-in user. The query is a JSON object with the following fields 
            - **message** - message (required) 
            - **startDate** - start date (example "2024-06-12T08:46:00")
            - **finishDate** - finish date
            - **groupId** - group if (null if for all users)
            - **enabled** - is active
            - **afterLogin** - show only after login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addSystemMessageDto'
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
    delete:
      security:
        - basicAuth: []    
      tags:
        - system messages
      summary: (Admin) Deleting system message
      description: Deletes system message with given id
      parameters:
        - name: "id"
          in: "path"
          description: "Id of the system message"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  
      
components:
  securitySchemes:
    basicAuth:     
      type: http
      scheme: basic


  schemas:
    downloadList:
      type: object
      required:
        - total
        - data
      properties:
        total:
          type: integer
          format: int32
          example: 3
        data:
          $ref: '#/components/schemas/downloadListData'
    downloadListData:
      required:
        - userName
      properties:
        userName:
          type: string
          example: admin
        objectId:
          type: integer
          format: int32
          example: 100036
        firstName:
          type: string
          example: Default user
        lastName:
          type: string
          example: ""
        email:
          type: string
          example: example@suncode.pl
        active:
          type: boolean
          example: true
        number:
          type: string
          example: 122
        positions:
          type: string
          example: 
        groups:
          type: string
          example: admins
        fullName:
          type: string
          example: Default user
      type: object
    getUserInfo:
      type: object
      properties:
        userName:
          type: string
          example: admin
        firstName:
          type: string
          example: Administrator
        lastName:
          type: string
          example: PlusWorkflow
        fullName:
          type: string
          example: Administrator PlusWorkflow
        email:
          type: string
          example: ""
        number:
          type: string
          example: ""  
        groups:
          type: string
          example: adminstators 
        positions:
          type: string
          example: 
    getCurrentUserInfo:
      type: object
      properties:
        userName:
          type: string
          example: admin
        firstName:
          type: string
          example: Administrator
        lastName:
          type: string
          example: PlusWorkflow
        fullName:
          type: string
          example: Administrator PlusWorkflow
        email:
          type: string
          example: ""
        number:
          type: string
          example: ""  
        groups:
          type: array
          items: 
            type: object
            properties: 
              name:
                type: string
        positions:
          type: array
          items: 
            type: string
    getGroup:
      type: object
      properties:
        total:
          type: integer
          example: 1
        data:
          type: array
          items: 
            type: object
            properties: 
              name:
                type: string
                example: SharkGroup 
              description:
                type: string
                example: ""
              objectId:
                type: integer
                example: 1000035
              users:
                type: string
                example: 
    getTaskBox:
      type: object
      properties:
        total:
          type: integer
          example: 1
        data:
          type: array
          items: 
            type: object
            properties: 
              activityId:
                type: string
                example: 901_901_api_zapisformularza_zadanie_1
              activityDefId:
                type: string
                example: zadanie_1
              activityName:
                type: string
                example: Zadanie 1
              activityDescription:
                type: string
                example: Opis zadania
              activityState:
                type: string
                example: RUNNING
              processName:
                type: string
                example: zapisFormularza 3/00002
              processId:
                type: string
                example: 901_api_zapisformularza               
              processDefId:
                type: string
                example: zapisformularza                
              processDescription:
                type: string
                example: Opis procesu  
              processState:
                type: string
                example: RUNNING
              comingDate:
                type: integer
                example: 1384344181635               
              finishDate:
                type: string
                example:             
    getTask:
      type: object
      properties:     
        activityId:
          type: string
          example: 901_901_api_zapisformularza_zadanie_1
        activityDefId:
          type: string
          example: zadanie_1
        activityName:
          type: string
          example: Zadanie 1
        activityDescription:
          type: string
          example: Opis zadania
        activityState:
          type: string
          example: RUNNING
        processName:
          type: string
          example: zapisFormularza 3/00002
        processId:
          type: string
          example: 901_api_zapisformularza               
        processDefId:
          type: string
          example: zapisformularza                
        processDescription:
          type: string
          example: Opis procesu  
        processState:
          type: string
          example: RUNNING
        comingDate:
          type: integer
          example: 1384344181635               
        finishDate:
          type: string
          example:           
    acceptTask:
      type: object
      properties:
        nextActivityId:
          type: string
          example: 901_api_zapisformularza_zadanie         
        processId:
          type: string
          example: 901_901_api_zapisformularza_zadanie_1        
    getDocument:
      type: object
      properties:
        id:
          type: integer
          format: int64        
        documentClass:
          type: object
          properties:
            id:
              type: integer
              example: 3281      
            name:
              type: string
              example: xxx                  
            description:
              type: string
              example: description             
            expiration:
              type: string
              example: expiration                 
            expirationType:
              type: string
              example: on                 
            directory:
              type: string
              example:              
            encoding:
              type: boolean
              example: true             
            compressing:
              type: boolean
              example: false               
            ftsServerId:
              type: string
              example:                 
            cipherAlgorithm:
              type: string
              example: AES
            keyLength:
              type: integer
              example: 128              
            orderId:
              type: integer
              example: 6            
            indexPath:
              type: string
              example: C:\\temp\\qq\\\\k\\indexDir_3281
            indexing:
              type: boolean
              example: false           
            files:
              type: string
              example:   
            actions:
              type: string
              example:                 
            indexes:
              type: string
              example:                   
            linkConnections:
              type: string
              example:                
            expirationDate:
              type: string
              example:                  
        description:
          type: string
          example: description                  
        compressed:
          type: boolean
          example: false               
        encrypted:
          type: boolean
          example: true             
        cipherAlgorithm:
          type: string
          example: AES               
        cipherKey:
          type: string
          example: -72,-27,-19,-29,-27,87,-47,112,19,-55,-37,-21,-112,-13,-128,21              
        fileName:
          type: string
          example: PIARedist.exe              
        systemFileName:
          type: string
          example: IMG7882392016468885022.exe                              
        fileDate:
          type: integer
          example: 1391771512507              
        path:
          type: string
          example: C:\\temp\\qq\\k\\             
        uploader:
          type: string
          example: admin                            
        size:
          type: integer
          example: 6876816              
        version:
          type: object
          properties:
            file:
              type: string
              example:                  
            parentFile:
              type: string
              example:                
            newestFile:
              type: string
              example:              
            checkOutDate:
              type: integer
              example:          
            checkInDate:
              type: integer
              example: 1391727600000        
            replaceDate:
              type: integer
              example:            
            checkOutUserName:
              type: string
              example: admin      
            state:
              type: string
              example: STATE_READY        
            comment:
              type: string
              example:          
            version:
              type: integer
              example: 1      
            id:
              type: integer
              example: 2236           
            activityDocuments:
              type: string
              example:         
        activityDocuments:
          type: string
          example:           
        fullPath:
          type: string
          example: C:\\temp\\qq\\k\\/IMG7882392016468885022.exe           
    getDocumentInfo:
      type: object
      properties:
        file:
          type: object
          properties:
            id:
              type: integer
              example: 2236
            documentClass:
              type: object
              properties:
                id:
                  type: integer
                  example: 3281      
                name:
                  type: string
                  example: xxx                  
                description:
                  type: string
                  example: description             
                expiration:
                  type: string
                  example: expiration                 
                expirationType:
                  type: string
                  example: on                 
                directory:
                  type: string
                  example:              
                encoding:
                  type: boolean
                  example: true             
                compressing:
                  type: boolean
                  example: false               
                ftsServerId:
                  type: string
                  example:                 
                cipherAlgorithm:
                  type: string
                  example: AES
                keyLength:
                  type: integer
                  example: 128              
                orderId:
                  type: integer
                  example: 6            
                indexPath:
                  type: string
                  example: C:\\temp\\qq\\\\k\\indexDir_3281
                indexing:
                  type: boolean
                  example: false           
                files:
                  type: string
                  example:   
                actions:
                  type: string
                  example:                 
                indexes:
                  type: string
                  example:                   
                linkConnections:
                  type: string
                  example:                
                expirationDate:
                  type: integer
                  example:                  
            description:
              type: string
              example: description                  
            compressed:
              type: boolean
              example: false               
            encrypted:
              type: boolean
              example: true             
            cipherAlgorithm:
              type: string
              example: AES               
            cipherKey:
              type: string
              example: -72,-27,-19,-29,-27,87,-47,112,19,-55,-37,-21,-112,-13,-128,21             
            fileName:
              type: string
              example: PIARedist.exe              
            systemFileName:
              type: string
              example: IMG7882392016468885022.exe                              
            fileDate:
              type: integer
              example: 1391771512507              
            path:
              type: string
              example: C:\\temp\\qq\\k\\             
            uploader:
              type: string
              example: admin                            
            size:
              type: integer
              example: 6876816              
            version:
              type: object
              properties:
                file:
                  type: string
                  example:                  
                parentFile:
                  type: string
                  example:                
                newestFile:
                  type: string
                  example:              
                checkOutDate:
                  type: integer
                  example:          
                checkInDate:
                  type: integer
                  example: 1391727600000        
                replaceDate:
                  type: integer
                  example:            
                checkOutUserName:
                  type: string
                  example: admin      
                state:
                  type: string
                  example: STATE_READY        
                comment:
                  type: string
                  example:          
                version:
                  type: integer
                  example: 1      
                id:
                  type: integer
                  example: 2236           
                activityDocuments:
                  type: string
                  example:         
            activityDocuments:
              type: string
              example:           
            fullPath:
              type: string
              example: C:\\temp\\qq\\k\\/IMG7882392016468885022.exe
              
    docSearch:
      type: object
      properties:
        file:
          type: object
          properties:
            documentId:
              type: integer
              example: 81
            fileId:
              type: integer
              example: 110
            documentClassId:
              type: integer
              example: 110          
            indexes:     
              type: array
              items: 
                type: object
                properties:
                  id: 
                    type: integer
                    example: 17
                  name:
                    type: string
                    example: date
                  value: 
                    type: string
                    example: Date
                  type: 
                    type: string
                    example: string
    getAllVer:
      type: object
      properties:
        id:
          type: integer
          example: 201
        documentClass:
          type: string
          example: 
        description:
          type: string
          example: description    
        compressed:
          type: boolean
          example: false 
        encrypted:
          type: boolean
          example: false 
        cipherAlgorithm:
          type: string
          example: AES
        cipherKey:
          type: integer
          example: 128
        fileName:
          type: string
          example: file1.txt
        systemFileName:
          type: string
          example: IMG2940464874411094485.txt
        fileDate:
          type: integer
          example: 1560167912486
        path:
          type: string
          example: C:\\Temp\\UrzƒÖdzenia\\Katalog1\\
        uploader:
          type: string
          example: admin
        size:
          type: integer
          example: 31     
        version:
          type: object
          properties:           
            file: 
              type: string
              example:
            parentFile:
              type: string
              example: 
            newestFile:
              type: string
              example:     
            checkOutDate:
              type: integer
              example: 1560808800000
            checkInDate:
              type: integer
              example: 1560117600000  
            replaceDate:
              type: integer
              example: 1560808800000
            checkOutUserName:
              type: string
              example: admin
            state:
              type: string
              example: STATE_EDIT  
            comment:
              type: string
              example:      
            versione:
              type: integer
              example: 1 
            id:
              type: integer
              example: 201
            activityDocuments:
              type: string
              example:      
        activityDocuments:
          type: string
          example:          
    docQuery:
      type: object
      properties:
        documentClassId:
          type: integer
          example: 2
        documentSetId:
          type: integer
          example: 3
        indexes:
          type: object
          properties:
            indexId 1: 
              type: string
            indexId 2: 
              type: string              
        fromDate:
          type: string
          example: 2023-09-07           
        endDate:
          type: string
          example: 2023-10-07             
    deactivateUser:
      type: object
      properties:
        userName:
          type: string
        delegationUser:
          type: string
        viewUser:
          type: string
        reportUser:
          type: string
        dashboardUser:
          type: string
        notificationUser: 
          type: string
        processes:
          type: array
          items:
            type: object
            properties: 
              name:
                type: string
              description:
                type: string
              packageId:
                type: string
              processDefId: 
                type: string
              children: 
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    id:
                      type: string
                    children:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          activityDefId:
                            type: string
                          assigned:
                            type: boolean
                          leaf:
                            type: boolean
                          assignments:
                            type: array
                            items:
                              type: string
                          group:
                            type: boolean
    deactivateUserChange:
      type: object
      properties:
        userName:
          type: string
        processes:
          type: array
          items:
            type: object
            properties: 
              name:
                type: string
              description:
                type: string
              packageId:
                type: string
              processDefId: 
                type: string
              children: 
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    id:
                      type: string
                    children:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          activityDefId:
                            type: string
                          assigned:
                            type: boolean
                          leaf:
                            type: boolean
                          assignments:
                            type: array
                            items:
                              type: string
                          group:
                            type: boolean
    processCreation:
      type: object
      properties:
        packageId:
          type: string
        processDefId:
          type: string
        variables:
          type: object
          properties:
            integer_variable:
              type: integer
            text_variable:
              type: string
            date_variable:
              type: string
              example: yyyy-MM-dd
            amount_variable:
              type: number
              format: float
            float_variable:
              type: number
              format: float              
            boolean_variable:
              type: boolean      
            textfield_variable:
              type: string        
            user_variable:
              type: string           
            datetime_variable:
              type: string      
              example: yyyy-MM-dd HH:mm:ss
            tabelar_variable:
              type: string
              example: 1.1;2.2;3.3
    logger:
      type: object
      properties:
        message:
          type: string
        location:
          type: string
    viewDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    viewProtectionDto:
      type: object
      properties:
        viewId:
          type: integer
        shareUserId:
          type: string
        isGroup:
          type: boolean
        permissionLevel:
          type: string
    extension:
      type: "string"
      enum:
        - pdf
        - excel
        - csv
    renameAliasDto:
      type: object
      properties:
        alias:
          type: string
        newAlias:
          type: string
    userSettingsForm:
      type: object
      properties:
        language:
          type: string
        template:
          type: string
        compactTemplate:
          type: string
        pageSize:
          type: string
        defaultView:
          type: string
        emails:
          type: string
        viewAvatar:
          type: string
        taskAvatar:
          type: string
    userGlobalSettingsForm:
      type: object
      properties:
        resourceName:
          type: string
        isGroup:
          type: string
        language:
          type: string
        template:
          type: string
        compactTemplate:
          type: string
        pageSize:
          type: string
        defaultView:
          type: string
        emails:
          type: string
        viewAvatar:
          type: string
        taskAvatar:
          type: string
    addUserDocumentView:
      type: object
      properties:
        documentViewName:
          type: string
        documentViewDesc:
          type: string
          default: ""
        procDefId:
          type: string
          default: ""
        taskDefId:
          type: string
          default: ""
        userId:
          type: string
          default: null
        docClassId:
          type: string
          default: ""
        descending:
          type: boolean
        amount:
          type: integer
        regex:
          type: string
        showOn:
          type: string
          default: "SHOW_ALL"
        displayByOffice365:
          type: boolean
          default: false
    associatedIndexesDto:
      type: object
      properties:
        parentIndexId:
          type: integer
        childIndexId:
          type: integer
    displayedIndexDto:
      type: object
      properties:
        indexId:
          type: integer
    upsertDocumentClassAssociationDto:
      type: object
      properties:
        id:
          type: integer
        parentClassId:
          type: integer
        childClassId:
          type: integer
        separator:
          type: string
        associateOnEmptyValues:
          type: boolean
        associatedIndexes:
          type: array
          items:
            $ref: '#/components/schemas/associatedIndexesDto'
        displayedIndexes:
          type: array
          items:
            $ref: '#/components/schemas/displayedIndexDto'
    groupDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    addGroupDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    updateDocumentClassIndexDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        type:
          type: string
          default: string
        indexPatterns:
          type: array
          items:
            type: object
            properties:
              pattern:
                type: string
              replace:
                type: string
              isRegex:
                type: boolean
    documentClassIndexDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          default: string
        indexPatterns:
          type: array
          items:
            $ref: '#/components/schemas/associatedIndexesDto'
    upsertDocumentClassRightDto:
      type: object
      properties:
        resourceName:
          type: string
        group:
          type: boolean
        canAddDocumentInArchive:
          type: boolean
        canAddDocumentInProcess:
          type: boolean
        canPrint:
          type: boolean
        canShowAllDocuments:
          type: boolean
        rightLevel:
          type: string
        documentDetachType:
          type: string
        logicalConnection:
          type: string
        conditions:
          type: array
          items:
             $ref: '#/components/schemas/documentRightConditionDto'
    documentRightConditionDto:
      type: object
      properties:
        resourceName:
          type: string
        group:
          type: boolean
        type:
          type: string
        documentClassIndexId:
          type: string
        operator:
          type: string
        negation:
          type: boolean
        value:
          type: string
    linkDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        iconName:
          type: string
        iconColor:
          type: string
    gadgetAppendDto:
      type: object
      properties:
        key:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
        layout:
          type: object
          properties:
            appendType:
              type: string
              enum: [END, APPEND_TO_GADGET]
            width:
              type: integer
            height:
              type: integer
            targetGadgetId:
              type: integer
    upsertLinkConnectionDto:
      type: object
      properties:
        linkIndexId:
          type: integer
        documentClassIndexId:
          type: integer
    linkIndexDto:
      type: object
      properties:
        indexName:
          type: string
        indexDescription:
          type: string
        indexType:
          type: string
        indexValues:
          type: string
    linkProtection:
      type: object
      properties:
        userName:
          type: string
        isGroup:
          type: boolean
    addPositionDto:
      type: object
      properties:
        positionName:
          type: string
        positionSymbol:
          type: string
        higherPositionId:
          type: integer
        organizationalUnitId:
          type: integer
        rolesId:
          type: array
          items:
            type: integer
    editPositionDto:
      type: object
      properties:
        positionName:
          type: string
        positionSymbol:
          type: string
        higherPositionId:
          type: integer
        organizationalUnitId:
          type: integer
    systemTranslationDto:
      type: object
      properties:
        source: 
          type: string
        scope:
          type: string
          enum: [SERVER, BROWSER]
        key:
          type: string
    systemTranslationDtoArray:
      type: array
      items:
        $ref: '#/components/schemas/systemTranslationDto'
    configElementTranslationDto:
      type: object
      properties:
        source: 
          type: string
          enum: [DOCUMENT_CLASS, DOCUMENT_CLASS_INDEX,VIEW, LINK, LINK_INDEX, POSITION, ORGANIZATIONAL_UNIT, REPORT, PASSWORD_POLICY_PROFILE, EMAIL_SUBJECT, SCHEDULED_TASK_CATEGORY, PROCESS_ABBREVIATION, USER_DASHBOARD]
        translatedEntityId:
          type: integer
        translatedEntityName:
          type: string
        translatedFieldType:
          type: string
          enum: [NAME, DESCRIPTION, SUBJECT, ABBREVIATION]
    configElementTranslationDtoArray:
      type: array
      items:
        $ref: '#/components/schemas/configElementTranslationDto'
    customTranslationDto:
      type: object
      properties:
        key:
          type: string
    customTranslationDtoArray:
      type: array
      items:
        $ref: '#/components/schemas/customTranslationDto'
    upsertOrganizationalUnitDto:
      type: object
      properties:
        organizationalUnitName:
          type: string
        organizationalUnitSymbol:
          type: string
        directorPositionId:
          type: integer
        higherOrganizationalUnitId:
          type: integer
    calendarShareDto:
      type: object
      properties:
        shareResourceId:
          type: string
        isGroup:
          type: boolean
    substitutionDto:
      type: object
      properties:
        processDefId:
          type: string
        roleId:
          type: string
        substitutedUsername:
          type: string
        substituteUsername:
          type: string
        startDate:
          type: string
        finishDate:
          type: string
    oAuthClientDto:
      type: object
      properties:
        name:
          type: string
        authenticationMethod:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        scope:
          type: string
        authorizationUrl:
          type: string
        tokenUrl:
          type: string
        redirectUrl:
          type: string
        connections:
          type: array
          items:
            $ref: '#/components/schemas/oAuthConnectionDto'
    oAuthConnectionDto:
      type: object
      properties:
        accessToken:
          type: string
        expires:
          type: string
        scope:
          type: string
        refreshToken:
          type: string
        email:
          type: string
        clientId:
          type: string
    addUserDto:
      properties:
        domainId:
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        number:
          type: string
        password:
          type: string
        groupIds:
          type: array
          items:
            type: integer
        positionIds:
          type: array
          items:
            type: integer
        waitingForPasswordAssign:
          type: boolean
        language:
          type: string
        onlySsoLogin:
          type: boolean
    changeUserDto:
      properties:
        domainId:
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        number:
          type: string
        password:
          type: string
        deletePassword:
          type: boolean
        onlySsoLogin:
          type: boolean
    importLdapUsersDto:
      properties:
        domainId:
          type: integer
        dnPath:
          type: string
        importFilter:
          type: string
        defaultGroupNames:
          type: array
          items:
            type: string
        addToDefaultGroup:
          type: boolean
        addToLdapGroup:
          type: boolean
        createNotExistingGroups:
          type: boolean
    updateForm:
      properties:
        name:
          type: string
        description:
          type: string
        abbreviation:
          type: string
        color:
          type: string
        share:
          type: array
          items:
            $ref: '#/components/schemas/shareDto'
    shareDto:
      properties:
        type: 
          type: string
        resource:
          type: integer
    emailConfigurationDto:
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        defaultConfiguration:
          type: boolean
        mailServer:
          type: string
        smtpMailServer:
          type: string
        smtpPortNumber:
          type: integer
        sourceAddress:
          type: string
        timeout:
          type: integer
        mailUser:
          type: string
        useSSL:
          type: boolean
        useStartTLS:
          type: boolean
        smtpUser:
          type: string
        userPassword:
          type: string
        debug:
          type: boolean
        emailAuthenticationMethod:
          type: string
        oauth2Connection:
          type: integer
        bufferSender:
          type: boolean
        maxAttempts:
          type: integer
        period:
          type: integer
        tryAfter:
          type: integer
        sendCopy:
          type: boolean
        sendCopyRecipients:
          type: string
        sendCopyRecipientsType:
          type: "string"
          enum:
            - to
            - copy
            - blind_copy
    addSystemMessageDto:
      properties:
        message:
          type: string
        startDate:
          type: string
        finishDate:
          type: string
        groupId:
          type: string
        enabled:
          type: boolean
        afterLogin:
          type: boolean
    parameterSingleValue:
      properties:
        valueType:
          type: string
        value:
          type: string
    parameterArrayValue:
      properties:
        valueType:
          type: string
        value:
          type: array
          items:
            $ref: '#/components/schemas/parameterSingleValue'
    parameterInfo:
      properties:
        position:
          type: integer
        type:
          type: string
          enum:
            - java.lang.Long
            - java.lang.Integer
            - java.lang.Double
            - java.lang.Float
            - java.lang.Boolean
            - java.lang.Byte
            - java.lang.Short
        value:
           $ref: '#/components/schemas/parameterArrayValue'
    scheduledTaskPeriod:
      properties:
        unit:
          type: string
        value:
          type: integer
    addScheduledTaskDto:
      properties:
        name:
          type: string
        description:
          type: string
        method:
          type: string
        className:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/parameterInfo'
        categoryName:
          type: string
        categoryId:
          type: integer
        firstRun:
          type: string
        executeOnce:
          type: boolean
        period:
          $ref: '#/components/schemas/scheduledTaskPeriod'
        active:
          type: boolean
        saveHistory:
          type: boolean
    restResult:
      properties:
        success:
          type: boolean
        message:
          type: string
    finishedUserActivityState:
      type: "string"
      enum:
        - all
        - failed
        - successful
        - processing
    openUserActivityState:
      type: "string"
      enum:
        - all
        - new
        - running
        - waitingToStart
        - inSubstitution
        - exceededDeadline
          
    ActivityViewSearchCriteria:
      type: object
      description: Container for DTO objects
      properties:
        variableCriteria:
          type: array
          items:
            $ref: "#/components/schemas/ViewVariableCriteria"
        activityCriteria:
          description: "Correct activity header ids are: [activityName, activityState, activityPerformer, activityCreatedDate, activityFinishedDate, activityDeadlineTimeDays, activityDeadlineName]. Correct activity states are: [open.running, open.not_running.not_started, open.not_running.suspended, open%, closed.completed, closed.terminated, closed.aborted ]"
          type: array
          items:
            $ref: "#/components/schemas/ViewVariableCriteria"
        processCriteria:
          description: "Correct process header ids are: [processName, processState, processType, processDescription, processInitiator, processCreatedData, processFinishedDate, processDeadlineTimeDays]. Correct process states are: [open.running, open.not_running.not_started, open.not_running.suspended, closed.completed, closed.terminated, closed.aborted ]"
          type: array
          items:
            $ref: "#/components/schemas/ViewVariableCriteria"

    ViewVariableCriteria:
      type: object
      properties:
        id:
          type: string
          description: Variable ID
        values:
          type: array
          items:
            type: string
          description: List of search values.
        value:
          type: string
        from:
          type: string
        to:
          type: string
        isRangeActive:
          type: boolean
          description: If set filters from and to will be used for text, numeric, date variables range query

    ActivityViewFinderResults:
      type: object
      description: Search results container
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ActivityViewFinderResultsRow"
        total:
          type: integer

    ActivityViewFinderResultsRow:
      type: object
      properties:
        processId:
          type: string
        processDefinitionId:
          type: string
        activityId:
          type: string
        activityDefinitionId:
          type: string
        values:
          type: array
          items:
            $ref: "#/components/schemas/ActivityViewFinderResultValue"

    ActivityViewFinderResultValue:
      type: object
      properties:
        id:
          type: string
        value:
          type: string



externalDocs:
  url: http://plusworkflow.helpdocsonline.com/home
  description: "Documentation of the Plus Workflow system "
